using namespace mozilla::gfx;
LIBRARY_API SurfaceType moz2d_test_SurfaceType_DATA () { return SurfaceType::DATA; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_D2D1_BITMAP () { return SurfaceType::D2D1_BITMAP; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_D2D1_DRAWTARGET () { return SurfaceType::D2D1_DRAWTARGET; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_CAIRO () { return SurfaceType::CAIRO; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_CAIRO_IMAGE () { return SurfaceType::CAIRO_IMAGE; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_COREGRAPHICS_IMAGE () { return SurfaceType::COREGRAPHICS_IMAGE; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_COREGRAPHICS_CGCONTEXT () { return SurfaceType::COREGRAPHICS_CGCONTEXT; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_SKIA () { return SurfaceType::SKIA; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_DUAL_DT () { return SurfaceType::DUAL_DT; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_D2D1_1_IMAGE () { return SurfaceType::D2D1_1_IMAGE; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_RECORDING () { return SurfaceType::RECORDING; } LIBRARY_API SurfaceType moz2d_test_SurfaceType_TILED () { return SurfaceType::TILED; } struct MapSurfaceType { const char *name; SurfaceType (*func)(void);}; const static MapSurfaceType Map_SurfaceType [] = { { "DATA", moz2d_test_SurfaceType_DATA }, { "D2D1_BITMAP", moz2d_test_SurfaceType_D2D1_BITMAP }, { "D2D1_DRAWTARGET", moz2d_test_SurfaceType_D2D1_DRAWTARGET }, { "CAIRO", moz2d_test_SurfaceType_CAIRO }, { "CAIRO_IMAGE", moz2d_test_SurfaceType_CAIRO_IMAGE }, { "COREGRAPHICS_IMAGE", moz2d_test_SurfaceType_COREGRAPHICS_IMAGE }, { "COREGRAPHICS_CGCONTEXT", moz2d_test_SurfaceType_COREGRAPHICS_CGCONTEXT }, { "SKIA", moz2d_test_SurfaceType_SKIA }, { "DUAL_DT", moz2d_test_SurfaceType_DUAL_DT }, { "D2D1_1_IMAGE", moz2d_test_SurfaceType_D2D1_1_IMAGE }, { "RECORDING", moz2d_test_SurfaceType_RECORDING }, { "TILED", moz2d_test_SurfaceType_TILED }, }; LIBRARY_API bool moz2d_test_SurfaceType (const char *name, SurfaceType *result) { unsigned long i; for (i = 0; i < (sizeof(Map_SurfaceType) / sizeof(Map_SurfaceType[0])); i++) { if (!strcmp(Map_SurfaceType[i].name, name) && Map_SurfaceType[i].func) { *result = Map_SurfaceType[i].func(); return true; } } return false;}
LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_B8G8R8A8 () { return SurfaceFormat::B8G8R8A8; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_B8G8R8X8 () { return SurfaceFormat::B8G8R8X8; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_R8G8B8A8 () { return SurfaceFormat::R8G8B8A8; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_R8G8B8X8 () { return SurfaceFormat::R8G8B8X8; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_A8R8G8B8 () { return SurfaceFormat::A8R8G8B8; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_X8R8G8B8 () { return SurfaceFormat::X8R8G8B8; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_R8G8B8 () { return SurfaceFormat::R8G8B8; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_B8G8R8 () { return SurfaceFormat::B8G8R8; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_R5G6B5_UINT16 () { return SurfaceFormat::R5G6B5_UINT16; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_A8 () { return SurfaceFormat::A8; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_YUV () { return SurfaceFormat::YUV; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_NV12 () { return SurfaceFormat::NV12; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_YUV422 () { return SurfaceFormat::YUV422; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_HSV () { return SurfaceFormat::HSV; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_Lab () { return SurfaceFormat::Lab; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_Depth () { return SurfaceFormat::Depth; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_UNKNOWN () { return SurfaceFormat::UNKNOWN; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_A8R8G8B8_UINT32 () { return SurfaceFormat::A8R8G8B8_UINT32; } LIBRARY_API SurfaceFormat moz2d_test_SurfaceFormat_X8R8G8B8_UINT32 () { return SurfaceFormat::X8R8G8B8_UINT32; } struct MapSurfaceFormat { const char *name; SurfaceFormat (*func)(void);}; const static MapSurfaceFormat Map_SurfaceFormat [] = { { "B8G8R8A8", moz2d_test_SurfaceFormat_B8G8R8A8 }, { "B8G8R8X8", moz2d_test_SurfaceFormat_B8G8R8X8 }, { "R8G8B8A8", moz2d_test_SurfaceFormat_R8G8B8A8 }, { "R8G8B8X8", moz2d_test_SurfaceFormat_R8G8B8X8 }, { "A8R8G8B8", moz2d_test_SurfaceFormat_A8R8G8B8 }, { "X8R8G8B8", moz2d_test_SurfaceFormat_X8R8G8B8 }, { "R8G8B8", moz2d_test_SurfaceFormat_R8G8B8 }, { "B8G8R8", moz2d_test_SurfaceFormat_B8G8R8 }, { "R5G6B5_UINT16", moz2d_test_SurfaceFormat_R5G6B5_UINT16 }, { "A8", moz2d_test_SurfaceFormat_A8 }, { "YUV", moz2d_test_SurfaceFormat_YUV }, { "NV12", moz2d_test_SurfaceFormat_NV12 }, { "YUV422", moz2d_test_SurfaceFormat_YUV422 }, { "HSV", moz2d_test_SurfaceFormat_HSV }, { "Lab", moz2d_test_SurfaceFormat_Lab }, { "Depth", moz2d_test_SurfaceFormat_Depth }, { "UNKNOWN", moz2d_test_SurfaceFormat_UNKNOWN }, { "A8R8G8B8_UINT32", moz2d_test_SurfaceFormat_A8R8G8B8_UINT32 }, { "X8R8G8B8_UINT32", moz2d_test_SurfaceFormat_X8R8G8B8_UINT32 }, }; LIBRARY_API bool moz2d_test_SurfaceFormat (const char *name, SurfaceFormat *result) { unsigned long i; for (i = 0; i < (sizeof(Map_SurfaceFormat) / sizeof(Map_SurfaceFormat[0])); i++) { if (!strcmp(Map_SurfaceFormat[i].name, name) && Map_SurfaceFormat[i].func) { *result = Map_SurfaceFormat[i].func(); return true; } } return false;}
LIBRARY_API FilterType moz2d_test_FilterType_BLEND () { return FilterType::BLEND; } LIBRARY_API FilterType moz2d_test_FilterType_TRANSFORM () { return FilterType::TRANSFORM; } LIBRARY_API FilterType moz2d_test_FilterType_MORPHOLOGY () { return FilterType::MORPHOLOGY; } LIBRARY_API FilterType moz2d_test_FilterType_COLOR_MATRIX () { return FilterType::COLOR_MATRIX; } LIBRARY_API FilterType moz2d_test_FilterType_FLOOD () { return FilterType::FLOOD; } LIBRARY_API FilterType moz2d_test_FilterType_TILE () { return FilterType::TILE; } LIBRARY_API FilterType moz2d_test_FilterType_TABLE_TRANSFER () { return FilterType::TABLE_TRANSFER; } LIBRARY_API FilterType moz2d_test_FilterType_DISCRETE_TRANSFER () { return FilterType::DISCRETE_TRANSFER; } LIBRARY_API FilterType moz2d_test_FilterType_LINEAR_TRANSFER () { return FilterType::LINEAR_TRANSFER; } LIBRARY_API FilterType moz2d_test_FilterType_GAMMA_TRANSFER () { return FilterType::GAMMA_TRANSFER; } LIBRARY_API FilterType moz2d_test_FilterType_CONVOLVE_MATRIX () { return FilterType::CONVOLVE_MATRIX; } LIBRARY_API FilterType moz2d_test_FilterType_DISPLACEMENT_MAP () { return FilterType::DISPLACEMENT_MAP; } LIBRARY_API FilterType moz2d_test_FilterType_TURBULENCE () { return FilterType::TURBULENCE; } LIBRARY_API FilterType moz2d_test_FilterType_ARITHMETIC_COMBINE () { return FilterType::ARITHMETIC_COMBINE; } LIBRARY_API FilterType moz2d_test_FilterType_COMPOSITE () { return FilterType::COMPOSITE; } LIBRARY_API FilterType moz2d_test_FilterType_DIRECTIONAL_BLUR () { return FilterType::DIRECTIONAL_BLUR; } LIBRARY_API FilterType moz2d_test_FilterType_GAUSSIAN_BLUR () { return FilterType::GAUSSIAN_BLUR; } LIBRARY_API FilterType moz2d_test_FilterType_POINT_DIFFUSE () { return FilterType::POINT_DIFFUSE; } LIBRARY_API FilterType moz2d_test_FilterType_POINT_SPECULAR () { return FilterType::POINT_SPECULAR; } LIBRARY_API FilterType moz2d_test_FilterType_SPOT_DIFFUSE () { return FilterType::SPOT_DIFFUSE; } LIBRARY_API FilterType moz2d_test_FilterType_SPOT_SPECULAR () { return FilterType::SPOT_SPECULAR; } LIBRARY_API FilterType moz2d_test_FilterType_DISTANT_DIFFUSE () { return FilterType::DISTANT_DIFFUSE; } LIBRARY_API FilterType moz2d_test_FilterType_DISTANT_SPECULAR () { return FilterType::DISTANT_SPECULAR; } LIBRARY_API FilterType moz2d_test_FilterType_CROP () { return FilterType::CROP; } LIBRARY_API FilterType moz2d_test_FilterType_PREMULTIPLY () { return FilterType::PREMULTIPLY; } LIBRARY_API FilterType moz2d_test_FilterType_UNPREMULTIPLY () { return FilterType::UNPREMULTIPLY; } struct MapFilterType { const char *name; FilterType (*func)(void);}; const static MapFilterType Map_FilterType [] = { { "BLEND", moz2d_test_FilterType_BLEND }, { "TRANSFORM", moz2d_test_FilterType_TRANSFORM }, { "MORPHOLOGY", moz2d_test_FilterType_MORPHOLOGY }, { "COLOR_MATRIX", moz2d_test_FilterType_COLOR_MATRIX }, { "FLOOD", moz2d_test_FilterType_FLOOD }, { "TILE", moz2d_test_FilterType_TILE }, { "TABLE_TRANSFER", moz2d_test_FilterType_TABLE_TRANSFER }, { "DISCRETE_TRANSFER", moz2d_test_FilterType_DISCRETE_TRANSFER }, { "LINEAR_TRANSFER", moz2d_test_FilterType_LINEAR_TRANSFER }, { "GAMMA_TRANSFER", moz2d_test_FilterType_GAMMA_TRANSFER }, { "CONVOLVE_MATRIX", moz2d_test_FilterType_CONVOLVE_MATRIX }, { "DISPLACEMENT_MAP", moz2d_test_FilterType_DISPLACEMENT_MAP }, { "TURBULENCE", moz2d_test_FilterType_TURBULENCE }, { "ARITHMETIC_COMBINE", moz2d_test_FilterType_ARITHMETIC_COMBINE }, { "COMPOSITE", moz2d_test_FilterType_COMPOSITE }, { "DIRECTIONAL_BLUR", moz2d_test_FilterType_DIRECTIONAL_BLUR }, { "GAUSSIAN_BLUR", moz2d_test_FilterType_GAUSSIAN_BLUR }, { "POINT_DIFFUSE", moz2d_test_FilterType_POINT_DIFFUSE }, { "POINT_SPECULAR", moz2d_test_FilterType_POINT_SPECULAR }, { "SPOT_DIFFUSE", moz2d_test_FilterType_SPOT_DIFFUSE }, { "SPOT_SPECULAR", moz2d_test_FilterType_SPOT_SPECULAR }, { "DISTANT_DIFFUSE", moz2d_test_FilterType_DISTANT_DIFFUSE }, { "DISTANT_SPECULAR", moz2d_test_FilterType_DISTANT_SPECULAR }, { "CROP", moz2d_test_FilterType_CROP }, { "PREMULTIPLY", moz2d_test_FilterType_PREMULTIPLY }, { "UNPREMULTIPLY", moz2d_test_FilterType_UNPREMULTIPLY }, }; LIBRARY_API bool moz2d_test_FilterType (const char *name, FilterType *result) { unsigned long i; for (i = 0; i < (sizeof(Map_FilterType) / sizeof(Map_FilterType[0])); i++) { if (!strcmp(Map_FilterType[i].name, name) && Map_FilterType[i].func) { *result = Map_FilterType[i].func(); return true; } } return false;}
LIBRARY_API DrawTargetType moz2d_test_DrawTargetType_SOFTWARE_RASTER () { return DrawTargetType::SOFTWARE_RASTER; } LIBRARY_API DrawTargetType moz2d_test_DrawTargetType_HARDWARE_RASTER () { return DrawTargetType::HARDWARE_RASTER; } LIBRARY_API DrawTargetType moz2d_test_DrawTargetType_VECTOR () { return DrawTargetType::VECTOR; } struct MapDrawTargetType { const char *name; DrawTargetType (*func)(void);}; const static MapDrawTargetType Map_DrawTargetType [] = { { "SOFTWARE_RASTER", moz2d_test_DrawTargetType_SOFTWARE_RASTER }, { "HARDWARE_RASTER", moz2d_test_DrawTargetType_HARDWARE_RASTER }, { "VECTOR", moz2d_test_DrawTargetType_VECTOR }, }; LIBRARY_API bool moz2d_test_DrawTargetType (const char *name, DrawTargetType *result) { unsigned long i; for (i = 0; i < (sizeof(Map_DrawTargetType) / sizeof(Map_DrawTargetType[0])); i++) { if (!strcmp(Map_DrawTargetType[i].name, name) && Map_DrawTargetType[i].func) { *result = Map_DrawTargetType[i].func(); return true; } } return false;}
LIBRARY_API BackendType moz2d_test_BackendType_NONE () { return BackendType::NONE; } LIBRARY_API BackendType moz2d_test_BackendType_DIRECT2D () { return BackendType::DIRECT2D; } LIBRARY_API BackendType moz2d_test_BackendType_CAIRO () { return BackendType::CAIRO; } LIBRARY_API BackendType moz2d_test_BackendType_SKIA () { return BackendType::SKIA; } LIBRARY_API BackendType moz2d_test_BackendType_RECORDING () { return BackendType::RECORDING; } LIBRARY_API BackendType moz2d_test_BackendType_DIRECT2D1_1 () { return BackendType::DIRECT2D1_1; } LIBRARY_API BackendType moz2d_test_BackendType_BACKEND_LAST () { return BackendType::BACKEND_LAST; } struct MapBackendType { const char *name; BackendType (*func)(void);}; const static MapBackendType Map_BackendType [] = { { "NONE", moz2d_test_BackendType_NONE }, { "DIRECT2D", moz2d_test_BackendType_DIRECT2D }, { "CAIRO", moz2d_test_BackendType_CAIRO }, { "SKIA", moz2d_test_BackendType_SKIA }, { "RECORDING", moz2d_test_BackendType_RECORDING }, { "DIRECT2D1_1", moz2d_test_BackendType_DIRECT2D1_1 }, { "BACKEND_LAST", moz2d_test_BackendType_BACKEND_LAST }, }; LIBRARY_API bool moz2d_test_BackendType (const char *name, BackendType *result) { unsigned long i; for (i = 0; i < (sizeof(Map_BackendType) / sizeof(Map_BackendType[0])); i++) { if (!strcmp(Map_BackendType[i].name, name) && Map_BackendType[i].func) { *result = Map_BackendType[i].func(); return true; } } return false;}
LIBRARY_API FontType moz2d_test_FontType_DWRITE () { return FontType::DWRITE; } LIBRARY_API FontType moz2d_test_FontType_GDI () { return FontType::GDI; } LIBRARY_API FontType moz2d_test_FontType_MAC () { return FontType::MAC; } LIBRARY_API FontType moz2d_test_FontType_SKIA () { return FontType::SKIA; } LIBRARY_API FontType moz2d_test_FontType_CAIRO () { return FontType::CAIRO; } LIBRARY_API FontType moz2d_test_FontType_COREGRAPHICS () { return FontType::COREGRAPHICS; } LIBRARY_API FontType moz2d_test_FontType_FONTCONFIG () { return FontType::FONTCONFIG; } struct MapFontType { const char *name; FontType (*func)(void);}; const static MapFontType Map_FontType [] = { { "DWRITE", moz2d_test_FontType_DWRITE }, { "GDI", moz2d_test_FontType_GDI }, { "MAC", moz2d_test_FontType_MAC }, { "SKIA", moz2d_test_FontType_SKIA }, { "CAIRO", moz2d_test_FontType_CAIRO }, { "COREGRAPHICS", moz2d_test_FontType_COREGRAPHICS }, { "FONTCONFIG", moz2d_test_FontType_FONTCONFIG }, }; LIBRARY_API bool moz2d_test_FontType (const char *name, FontType *result) { unsigned long i; for (i = 0; i < (sizeof(Map_FontType) / sizeof(Map_FontType[0])); i++) { if (!strcmp(Map_FontType[i].name, name) && Map_FontType[i].func) { *result = Map_FontType[i].func(); return true; } } return false;}
LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_OVER () { return CompositionOp::OP_OVER; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_ADD () { return CompositionOp::OP_ADD; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_ATOP () { return CompositionOp::OP_ATOP; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_OUT () { return CompositionOp::OP_OUT; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_IN () { return CompositionOp::OP_IN; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_SOURCE () { return CompositionOp::OP_SOURCE; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_DEST_IN () { return CompositionOp::OP_DEST_IN; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_DEST_OUT () { return CompositionOp::OP_DEST_OUT; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_DEST_OVER () { return CompositionOp::OP_DEST_OVER; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_DEST_ATOP () { return CompositionOp::OP_DEST_ATOP; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_XOR () { return CompositionOp::OP_XOR; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_MULTIPLY () { return CompositionOp::OP_MULTIPLY; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_SCREEN () { return CompositionOp::OP_SCREEN; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_OVERLAY () { return CompositionOp::OP_OVERLAY; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_DARKEN () { return CompositionOp::OP_DARKEN; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_LIGHTEN () { return CompositionOp::OP_LIGHTEN; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_COLOR_DODGE () { return CompositionOp::OP_COLOR_DODGE; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_COLOR_BURN () { return CompositionOp::OP_COLOR_BURN; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_HARD_LIGHT () { return CompositionOp::OP_HARD_LIGHT; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_SOFT_LIGHT () { return CompositionOp::OP_SOFT_LIGHT; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_DIFFERENCE () { return CompositionOp::OP_DIFFERENCE; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_EXCLUSION () { return CompositionOp::OP_EXCLUSION; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_HUE () { return CompositionOp::OP_HUE; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_SATURATION () { return CompositionOp::OP_SATURATION; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_COLOR () { return CompositionOp::OP_COLOR; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_LUMINOSITY () { return CompositionOp::OP_LUMINOSITY; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_CLEAR () { return CompositionOp::OP_CLEAR; } LIBRARY_API CompositionOp moz2d_test_CompositionOp_OP_COUNT () { return CompositionOp::OP_COUNT; } struct MapCompositionOp { const char *name; CompositionOp (*func)(void);}; const static MapCompositionOp Map_CompositionOp [] = { { "OP_OVER", moz2d_test_CompositionOp_OP_OVER }, { "OP_ADD", moz2d_test_CompositionOp_OP_ADD }, { "OP_ATOP", moz2d_test_CompositionOp_OP_ATOP }, { "OP_OUT", moz2d_test_CompositionOp_OP_OUT }, { "OP_IN", moz2d_test_CompositionOp_OP_IN }, { "OP_SOURCE", moz2d_test_CompositionOp_OP_SOURCE }, { "OP_DEST_IN", moz2d_test_CompositionOp_OP_DEST_IN }, { "OP_DEST_OUT", moz2d_test_CompositionOp_OP_DEST_OUT }, { "OP_DEST_OVER", moz2d_test_CompositionOp_OP_DEST_OVER }, { "OP_DEST_ATOP", moz2d_test_CompositionOp_OP_DEST_ATOP }, { "OP_XOR", moz2d_test_CompositionOp_OP_XOR }, { "OP_MULTIPLY", moz2d_test_CompositionOp_OP_MULTIPLY }, { "OP_SCREEN", moz2d_test_CompositionOp_OP_SCREEN }, { "OP_OVERLAY", moz2d_test_CompositionOp_OP_OVERLAY }, { "OP_DARKEN", moz2d_test_CompositionOp_OP_DARKEN }, { "OP_LIGHTEN", moz2d_test_CompositionOp_OP_LIGHTEN }, { "OP_COLOR_DODGE", moz2d_test_CompositionOp_OP_COLOR_DODGE }, { "OP_COLOR_BURN", moz2d_test_CompositionOp_OP_COLOR_BURN }, { "OP_HARD_LIGHT", moz2d_test_CompositionOp_OP_HARD_LIGHT }, { "OP_SOFT_LIGHT", moz2d_test_CompositionOp_OP_SOFT_LIGHT }, { "OP_DIFFERENCE", moz2d_test_CompositionOp_OP_DIFFERENCE }, { "OP_EXCLUSION", moz2d_test_CompositionOp_OP_EXCLUSION }, { "OP_HUE", moz2d_test_CompositionOp_OP_HUE }, { "OP_SATURATION", moz2d_test_CompositionOp_OP_SATURATION }, { "OP_COLOR", moz2d_test_CompositionOp_OP_COLOR }, { "OP_LUMINOSITY", moz2d_test_CompositionOp_OP_LUMINOSITY }, { "OP_CLEAR", moz2d_test_CompositionOp_OP_CLEAR }, { "OP_COUNT", moz2d_test_CompositionOp_OP_COUNT }, }; LIBRARY_API bool moz2d_test_CompositionOp (const char *name, CompositionOp *result) { unsigned long i; for (i = 0; i < (sizeof(Map_CompositionOp) / sizeof(Map_CompositionOp[0])); i++) { if (!strcmp(Map_CompositionOp[i].name, name) && Map_CompositionOp[i].func) { *result = Map_CompositionOp[i].func(); return true; } } return false;}
LIBRARY_API ExtendMode moz2d_test_ExtendMode_CLAMP () { return ExtendMode::CLAMP; } LIBRARY_API ExtendMode moz2d_test_ExtendMode_REPEAT () { return ExtendMode::REPEAT; } LIBRARY_API ExtendMode moz2d_test_ExtendMode_REPEAT_X () { return ExtendMode::REPEAT_X; } LIBRARY_API ExtendMode moz2d_test_ExtendMode_REPEAT_Y () { return ExtendMode::REPEAT_Y; } LIBRARY_API ExtendMode moz2d_test_ExtendMode_REFLECT () { return ExtendMode::REFLECT; } struct MapExtendMode { const char *name; ExtendMode (*func)(void);}; const static MapExtendMode Map_ExtendMode [] = { { "CLAMP", moz2d_test_ExtendMode_CLAMP }, { "REPEAT", moz2d_test_ExtendMode_REPEAT }, { "REPEAT_X", moz2d_test_ExtendMode_REPEAT_X }, { "REPEAT_Y", moz2d_test_ExtendMode_REPEAT_Y }, { "REFLECT", moz2d_test_ExtendMode_REFLECT }, }; LIBRARY_API bool moz2d_test_ExtendMode (const char *name, ExtendMode *result) { unsigned long i; for (i = 0; i < (sizeof(Map_ExtendMode) / sizeof(Map_ExtendMode[0])); i++) { if (!strcmp(Map_ExtendMode[i].name, name) && Map_ExtendMode[i].func) { *result = Map_ExtendMode[i].func(); return true; } } return false;}
LIBRARY_API FillRule moz2d_test_FillRule_FILL_WINDING () { return FillRule::FILL_WINDING; } LIBRARY_API FillRule moz2d_test_FillRule_FILL_EVEN_ODD () { return FillRule::FILL_EVEN_ODD; } struct MapFillRule { const char *name; FillRule (*func)(void);}; const static MapFillRule Map_FillRule [] = { { "FILL_WINDING", moz2d_test_FillRule_FILL_WINDING }, { "FILL_EVEN_ODD", moz2d_test_FillRule_FILL_EVEN_ODD }, }; LIBRARY_API bool moz2d_test_FillRule (const char *name, FillRule *result) { unsigned long i; for (i = 0; i < (sizeof(Map_FillRule) / sizeof(Map_FillRule[0])); i++) { if (!strcmp(Map_FillRule[i].name, name) && Map_FillRule[i].func) { *result = Map_FillRule[i].func(); return true; } } return false;}
LIBRARY_API AntialiasMode moz2d_test_AntialiasMode_NONE () { return AntialiasMode::NONE; } LIBRARY_API AntialiasMode moz2d_test_AntialiasMode_GRAY () { return AntialiasMode::GRAY; } LIBRARY_API AntialiasMode moz2d_test_AntialiasMode_SUBPIXEL () { return AntialiasMode::SUBPIXEL; } LIBRARY_API AntialiasMode moz2d_test_AntialiasMode_DEFAULT () { return AntialiasMode::DEFAULT; } struct MapAntialiasMode { const char *name; AntialiasMode (*func)(void);}; const static MapAntialiasMode Map_AntialiasMode [] = { { "NONE", moz2d_test_AntialiasMode_NONE }, { "GRAY", moz2d_test_AntialiasMode_GRAY }, { "SUBPIXEL", moz2d_test_AntialiasMode_SUBPIXEL }, { "DEFAULT", moz2d_test_AntialiasMode_DEFAULT }, }; LIBRARY_API bool moz2d_test_AntialiasMode (const char *name, AntialiasMode *result) { unsigned long i; for (i = 0; i < (sizeof(Map_AntialiasMode) / sizeof(Map_AntialiasMode[0])); i++) { if (!strcmp(Map_AntialiasMode[i].name, name) && Map_AntialiasMode[i].func) { *result = Map_AntialiasMode[i].func(); return true; } } return false;}
LIBRARY_API SamplingFilter moz2d_test_SamplingFilter_GOOD () { return SamplingFilter::GOOD; } LIBRARY_API SamplingFilter moz2d_test_SamplingFilter_LINEAR () { return SamplingFilter::LINEAR; } LIBRARY_API SamplingFilter moz2d_test_SamplingFilter_POINT () { return SamplingFilter::POINT; } LIBRARY_API SamplingFilter moz2d_test_SamplingFilter_SENTINEL () { return SamplingFilter::SENTINEL; } struct MapSamplingFilter { const char *name; SamplingFilter (*func)(void);}; const static MapSamplingFilter Map_SamplingFilter [] = { { "GOOD", moz2d_test_SamplingFilter_GOOD }, { "LINEAR", moz2d_test_SamplingFilter_LINEAR }, { "POINT", moz2d_test_SamplingFilter_POINT }, { "SENTINEL", moz2d_test_SamplingFilter_SENTINEL }, }; LIBRARY_API bool moz2d_test_SamplingFilter (const char *name, SamplingFilter *result) { unsigned long i; for (i = 0; i < (sizeof(Map_SamplingFilter) / sizeof(Map_SamplingFilter[0])); i++) { if (!strcmp(Map_SamplingFilter[i].name, name) && Map_SamplingFilter[i].func) { *result = Map_SamplingFilter[i].func(); return true; } } return false;}
LIBRARY_API PatternType moz2d_test_PatternType_COLOR () { return PatternType::COLOR; } LIBRARY_API PatternType moz2d_test_PatternType_SURFACE () { return PatternType::SURFACE; } LIBRARY_API PatternType moz2d_test_PatternType_LINEAR_GRADIENT () { return PatternType::LINEAR_GRADIENT; } LIBRARY_API PatternType moz2d_test_PatternType_RADIAL_GRADIENT () { return PatternType::RADIAL_GRADIENT; } struct MapPatternType { const char *name; PatternType (*func)(void);}; const static MapPatternType Map_PatternType [] = { { "COLOR", moz2d_test_PatternType_COLOR }, { "SURFACE", moz2d_test_PatternType_SURFACE }, { "LINEAR_GRADIENT", moz2d_test_PatternType_LINEAR_GRADIENT }, { "RADIAL_GRADIENT", moz2d_test_PatternType_RADIAL_GRADIENT }, }; LIBRARY_API bool moz2d_test_PatternType (const char *name, PatternType *result) { unsigned long i; for (i = 0; i < (sizeof(Map_PatternType) / sizeof(Map_PatternType[0])); i++) { if (!strcmp(Map_PatternType[i].name, name) && Map_PatternType[i].func) { *result = Map_PatternType[i].func(); return true; } } return false;}
LIBRARY_API JoinStyle moz2d_test_JoinStyle_BEVEL () { return JoinStyle::BEVEL; } LIBRARY_API JoinStyle moz2d_test_JoinStyle_ROUND () { return JoinStyle::ROUND; } LIBRARY_API JoinStyle moz2d_test_JoinStyle_MITER () { return JoinStyle::MITER; } LIBRARY_API JoinStyle moz2d_test_JoinStyle_MITER_OR_BEVEL () { return JoinStyle::MITER_OR_BEVEL; } struct MapJoinStyle { const char *name; JoinStyle (*func)(void);}; const static MapJoinStyle Map_JoinStyle [] = { { "BEVEL", moz2d_test_JoinStyle_BEVEL }, { "ROUND", moz2d_test_JoinStyle_ROUND }, { "MITER", moz2d_test_JoinStyle_MITER }, { "MITER_OR_BEVEL", moz2d_test_JoinStyle_MITER_OR_BEVEL }, }; LIBRARY_API bool moz2d_test_JoinStyle (const char *name, JoinStyle *result) { unsigned long i; for (i = 0; i < (sizeof(Map_JoinStyle) / sizeof(Map_JoinStyle[0])); i++) { if (!strcmp(Map_JoinStyle[i].name, name) && Map_JoinStyle[i].func) { *result = Map_JoinStyle[i].func(); return true; } } return false;}
LIBRARY_API CapStyle moz2d_test_CapStyle_BUTT () { return CapStyle::BUTT; } LIBRARY_API CapStyle moz2d_test_CapStyle_ROUND () { return CapStyle::ROUND; } LIBRARY_API CapStyle moz2d_test_CapStyle_SQUARE () { return CapStyle::SQUARE; } struct MapCapStyle { const char *name; CapStyle (*func)(void);}; const static MapCapStyle Map_CapStyle [] = { { "BUTT", moz2d_test_CapStyle_BUTT }, { "ROUND", moz2d_test_CapStyle_ROUND }, { "SQUARE", moz2d_test_CapStyle_SQUARE }, }; LIBRARY_API bool moz2d_test_CapStyle (const char *name, CapStyle *result) { unsigned long i; for (i = 0; i < (sizeof(Map_CapStyle) / sizeof(Map_CapStyle[0])); i++) { if (!strcmp(Map_CapStyle[i].name, name) && Map_CapStyle[i].func) { *result = Map_CapStyle[i].func(); return true; } } return false;}
LIBRARY_API NativeSurfaceType moz2d_test_NativeSurfaceType_D3D10_TEXTURE () { return NativeSurfaceType::D3D10_TEXTURE; } LIBRARY_API NativeSurfaceType moz2d_test_NativeSurfaceType_CAIRO_CONTEXT () { return NativeSurfaceType::CAIRO_CONTEXT; } LIBRARY_API NativeSurfaceType moz2d_test_NativeSurfaceType_CGCONTEXT () { return NativeSurfaceType::CGCONTEXT; } LIBRARY_API NativeSurfaceType moz2d_test_NativeSurfaceType_CGCONTEXT_ACCELERATED () { return NativeSurfaceType::CGCONTEXT_ACCELERATED; } LIBRARY_API NativeSurfaceType moz2d_test_NativeSurfaceType_OPENGL_TEXTURE () { return NativeSurfaceType::OPENGL_TEXTURE; } struct MapNativeSurfaceType { const char *name; NativeSurfaceType (*func)(void);}; const static MapNativeSurfaceType Map_NativeSurfaceType [] = { { "D3D10_TEXTURE", moz2d_test_NativeSurfaceType_D3D10_TEXTURE }, { "CAIRO_CONTEXT", moz2d_test_NativeSurfaceType_CAIRO_CONTEXT }, { "CGCONTEXT", moz2d_test_NativeSurfaceType_CGCONTEXT }, { "CGCONTEXT_ACCELERATED", moz2d_test_NativeSurfaceType_CGCONTEXT_ACCELERATED }, { "OPENGL_TEXTURE", moz2d_test_NativeSurfaceType_OPENGL_TEXTURE }, }; LIBRARY_API bool moz2d_test_NativeSurfaceType (const char *name, NativeSurfaceType *result) { unsigned long i; for (i = 0; i < (sizeof(Map_NativeSurfaceType) / sizeof(Map_NativeSurfaceType[0])); i++) { if (!strcmp(Map_NativeSurfaceType[i].name, name) && Map_NativeSurfaceType[i].func) { *result = Map_NativeSurfaceType[i].func(); return true; } } return false;}
