typedef unsigned char t_bpt_cb;
typedef unsigned char t_bpt_opts;
typedef unsigned char t_bpt_type;
typedef unsigned char t_bpt_flags;
typedef struct s_bpt_tree t_bpt_tree; typedef signed int t_bpt_ndi_tree; typedef signed int t_bpt_uni_tree; typedef unsigned int t_bpt_nodes_tree; typedef unsigned short t_bpt_height_tree; typedef IN_ADDR_T t_bpt_addr_tree; typedef IN_KEY_T t_bpt_key_tree; typedef IN_VALUE_T t_bpt_value_tree; typedef t_in_inentry t_bpt_inentry_tree; typedef t_in_lfentry t_bpt_lfentry_tree; typedef t_bpt_addr_tree t_bpt_node_tree; typedef struct s_bpt_imm_tree { t_bpt_node_tree addr; void *buf; } t_bpt_imm_tree; typedef struct s_bpt_entry_tree { t_bpt_node_tree node; t_bpt_ndi_tree ndi; } t_bpt_entry_tree; typedef struct s_bpt_cbctx_tree { t_bpt_cb cb; t_bpt_entry_tree previous; t_bpt_entry_tree current; t_bpt_node_tree node; t_bpt_node_tree node1; t_bpt_node_tree node2; } t_bpt_cbctx_tree; typedef void (*t_bpt_load_fn_tree)(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_node_tree addr); typedef void (*t_bpt_unload_fn_tree)(t_bpt_tree *bpt, t_bpt_imm_tree *node); typedef int (*t_bpt_addrcmp_fn_tree)(t_bpt_tree *bpt, t_bpt_addr_tree addr1, t_bpt_addr_tree addr2); typedef int (*t_bpt_keycmp_fn_tree)(t_bpt_tree *bpt, t_bpt_key_tree key1, t_bpt_key_tree key2); typedef int (*t_bpt_valcmp_fn_tree)(t_bpt_tree *bpt, t_bpt_value_tree val1, t_bpt_value_tree val2); typedef void (*t_bpt_cb_fn_tree)(t_bpt_tree *bpt, t_bpt_cbctx_tree *cbctx); struct s_bpt_tree { t_bpt_ndi_tree nodesz; t_bpt_nodes_tree nodes; t_bpt_ndi_tree nikeys; t_bpt_ndi_tree nlkeys; t_bpt_height_tree height; t_bpt_node_tree root; t_bpt_flags flags; t_bpt_ndi_tree ibalancing; t_bpt_ndi_tree lbalancing; t_bpt_addr_tree uaddr; t_bpt_key_tree ukey; t_bpt_value_tree uval; t_bpt_load_fn_tree load; t_bpt_unload_fn_tree unload; t_bpt_addrcmp_fn_tree addrcmp; t_bpt_keycmp_fn_tree keycmp; t_bpt_valcmp_fn_tree valcmp; t_bpt_cb_fn_tree callback; void *data; }; typedef struct s_bpt_unused_tree { t_bpt_node_tree *array; t_bpt_uni_tree index; } t_bpt_unused_tree; typedef struct s_bpt_head_tree { t_bpt_type type; t_bpt_node_tree parent; t_bpt_node_tree prv; t_bpt_node_tree nxt; } __attribute__((packed)) t_bpt_head_tree; int bpt_foreach_tree(t_bpt_tree *bpt, t_bpt_entry_tree *entry); int bpt_list_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_entry_tree *entry, t_bpt_opts opts); int bpt_check_unused_tree(t_bpt_tree *bpt, t_bpt_unused_tree *unused, t_bpt_opts opts); int bpt_first_entry_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_ndi_tree *first); int bpt_prev_entry_tree(t_bpt_tree *bpt, t_bpt_entry_tree current, t_bpt_entry_tree *previous, t_bpt_opts opts); int bpt_next_entry_tree(t_bpt_tree *bpt, t_bpt_entry_tree current, t_bpt_entry_tree *next, t_bpt_opts opts); int bpt_last_entry_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_ndi_tree *last); void bpt_reinit_entries_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node); void bpt_make_node_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_type type); void bpt_key_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree *key); int bpt_ndi_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_addr_tree value, t_bpt_ndi_tree *ndi); int bpt_update_node_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_node_tree addr, t_bpt_key_tree key, t_bpt_opts opts); void bpt_update_parent_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node); int bpt_update_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_opts opts); int bpt_linear_search_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts); int bpt_dichotomic_search_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts); int bpt_dichotomic2_search_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts); int bpt_search_entry_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts); int bpt_search_leaf_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_node_tree *leaf, t_bpt_key_tree key); int bpt_search_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_entry_tree *entry); int bpt_collide_next_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_entry_tree *entry); int bpt_collide_search_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_value_tree value, t_bpt_entry_tree *entry); int bpt_check_collide_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_key_tree key, t_bpt_value_tree value); t_bpt_ndi_tree bpt_node_size_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node); void bpt_simplify_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_unused_tree *unused); int bpt_balancein_1_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2, t_bpt_cbctx_tree *cbctx, t_bpt_entry_tree prev, t_bpt_unused_tree *unused); int bpt_balancein_2_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2, t_bpt_cbctx_tree *cbctx, t_bpt_entry_tree prev, t_bpt_unused_tree *unused); int bpt_balancein_3_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node2, t_bpt_imm_tree *node1, t_bpt_cbctx_tree *cbctx, t_bpt_entry_tree prev, t_bpt_unused_tree *unused); int bpt_balancein_4_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node2, t_bpt_imm_tree *node1, t_bpt_cbctx_tree *cbctx, t_bpt_entry_tree prev, t_bpt_unused_tree *unused); int bpt_delete_tree(t_bpt_tree *bpt, t_bpt_entry_tree entry, t_bpt_cbctx_tree *cbctx, t_bpt_unused_tree *unused); int bpt_remove_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_unused_tree *unused); int bpt_collide_remove_tree(t_bpt_tree *bpt, t_bpt_entry_tree entry, t_bpt_unused_tree *unused); int bpt_modify_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_lfentry_tree *lfentry, t_bpt_unused_tree *unused); int bpt_collide_modify_tree(t_bpt_tree *bpt, t_bpt_entry_tree entry, t_bpt_lfentry_tree *lfentry, t_bpt_unused_tree *unused); void bpt_insert_head_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2); void bpt_insert_tail_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2); void bpt_shift_sort_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node); void bpt_insert_sort_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts); void bpt_new_root_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2, t_bpt_unused_tree *unused); int bpt_balanceout_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2, void *entry, t_bpt_cbctx_tree *cbctx); int bpt_split_node_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, void *entry, t_bpt_cbctx_tree *cbctx, t_bpt_unused_tree *unused); int bpt_insert_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, void *entry, t_bpt_cbctx_tree *cbctx, t_bpt_unused_tree *unused); int bpt_add_tree(t_bpt_tree *bpt, t_bpt_lfentry_tree *lfentry, t_bpt_unused_tree *unused); int bpt_init_tree(t_bpt_tree *bpt, t_bpt_ndi_tree nodesz, t_bpt_addr_tree uaddr, t_bpt_key_tree ukey, t_bpt_value_tree uval, t_bpt_flags flags, unsigned char balancing, t_bpt_load_fn_tree load, t_bpt_unload_fn_tree unload, t_bpt_addrcmp_fn_tree addrcmp, t_bpt_keycmp_fn_tree keycmp, t_bpt_valcmp_fn_tree valcmp, t_bpt_cb_fn_tree callback, void *data, t_bpt_unused_tree *unused); int bpt_clean_node_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_unused_tree *unused); int bpt_clean_tree(t_bpt_tree *bpt, t_bpt_unused_tree *unused); int bpt_foreach_tree(t_bpt_tree *bpt, t_bpt_entry_tree *entry) { if ((bpt)->addrcmp((bpt), (entry->node), (bpt->uaddr)) == 0) { t_bpt_imm_tree node; (bpt)->load((bpt), (&node), ((bpt)->root)); if (bpt_list_tree(bpt, &node, entry, 0x1) != 0) { (bpt)->unload((bpt), (&node));; return (-1); } (bpt)->unload((bpt), (&node));; return (0); } if (bpt_next_entry_tree(bpt, *entry, entry, 0x1) != 0) return (-1); return (0); } int bpt_list_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_entry_tree *entry, t_bpt_opts opts) { t_bpt_imm_tree child; t_bpt_ndi_tree i; if (((t_bpt_head_tree *)((node)->buf))->type == 0x02) { entry->node = node->addr; if (opts & 0x1) { if (bpt_first_entry_tree(bpt, node, &entry->ndi) != 0) return (-1); } else if (opts & 0x2) { if (bpt_last_entry_tree(bpt, node, &entry->ndi) != 0) return (-1); } else return (-1); return (0); } if (opts & 0x1) { if (bpt_first_entry_tree(bpt, node, &i) != 0) return (-1); } else if (opts & 0x2) { if (bpt_last_entry_tree(bpt, node, &i) != 0) return (-1); } else return (-1); (bpt)->load((bpt), (&child), (((t_bpt_inentry_tree *)(((node))->buf + sizeof(t_bpt_head_tree) + ((i)) * sizeof(t_bpt_inentry_tree)))->value)); if (bpt_list_tree(bpt, &child, entry, opts) != 0) { (bpt)->unload((bpt), (&child));; return (-1); } (bpt)->unload((bpt), (&child));; return (0); } int bpt_check_unused_tree(t_bpt_tree *bpt, t_bpt_unused_tree *unused, t_bpt_opts opts) { if (opts == 0x1) { if (unused->index >= ((1) - 1)) return (0); } else if (opts == 0x2) { if (unused->index >= (((bpt)->height + 1) - 1)) return (0); } else if (opts == 0x3) { if (unused->index >= ((((bpt)->height + 1) + (0)) - 1)) return (0); } else if (opts == 0x4) { if (unused->index >= ((0) - 1)) return (0); } else if (opts == 0x5) { if (unused->index >= ((0) - 1)) return (0); } return (-1); } int bpt_first_entry_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_ndi_tree *first) { t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_ndi_tree i; for (i = 0; i < nkeys; i++) if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) != 0) { *first = i; return (0); } return (-1); } int bpt_prev_entry_tree(t_bpt_tree *bpt, t_bpt_entry_tree current, t_bpt_entry_tree *previous, t_bpt_opts opts) { if (opts & 0x2) { t_bpt_ndi_tree nkeys; t_bpt_imm_tree node; t_bpt_ndi_tree i; if ((current.ndi - 1) < 0) return (-1); (bpt)->load((bpt), (&node), (current.node)); nkeys = (((t_bpt_head_tree *)(((&node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); if (current.ndi >= nkeys) { (bpt)->unload((bpt), (&node));; return (-1); } for (i = current.ndi - 1; i >= 0; i--) if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((&node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((&node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((&node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) != 0) { previous->node = node.addr; previous->ndi = i; (bpt)->unload((bpt), (&node));; return (0); } (bpt)->unload((bpt), (&node));; } if (opts & 0x1) { t_bpt_imm_tree node; t_bpt_imm_tree prev; if (bpt_prev_entry_tree(bpt, current, previous, 0x2) == 0) return (0); do { (bpt)->load((bpt), (&node), (current.node)); if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((&node)->buf))->prv), (bpt->uaddr)) == 0) { (bpt)->unload((bpt), (&node));; return (-1); } (bpt)->load((bpt), (&prev), (((t_bpt_head_tree *)((&node)->buf))->prv)); (bpt)->unload((bpt), (&node));; previous->node = prev.addr; if (bpt_last_entry_tree(bpt, &prev, &previous->ndi) == 0) { (bpt)->unload((bpt), (&prev));; return (0); } current.node = prev.addr; (bpt)->unload((bpt), (&prev));; } while (1); return (0); } return (-1); } int bpt_next_entry_tree(t_bpt_tree *bpt, t_bpt_entry_tree current, t_bpt_entry_tree *next, t_bpt_opts opts) { if (opts & 0x2) { t_bpt_ndi_tree nkeys; t_bpt_imm_tree node; t_bpt_ndi_tree i; (bpt)->load((bpt), (&node), (current.node)); nkeys = (((t_bpt_head_tree *)(((&node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); if ((current.ndi >= nkeys) || ((current.ndi + 1) >= nkeys)) { (bpt)->unload((bpt), (&node));; return (-1); } for (i = current.ndi + 1; i < nkeys; i++) if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((&node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((&node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((&node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) != 0) { next->node = node.addr; next->ndi = i; (bpt)->unload((bpt), (&node));; return (0); } (bpt)->unload((bpt), (&node));; } if (opts & 0x1) { t_bpt_imm_tree node; t_bpt_imm_tree nxt; if (bpt_next_entry_tree(bpt, current, next, 0x2) == 0) return (0); do { (bpt)->load((bpt), (&node), (current.node)); if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((&node)->buf))->nxt), (bpt->uaddr)) == 0) { (bpt)->unload((bpt), (&node));; return (-1); } (bpt)->load((bpt), (&nxt), (((t_bpt_head_tree *)((&node)->buf))->nxt)); (bpt)->unload((bpt), (&node));; next->node = nxt.addr; if (bpt_first_entry_tree(bpt, &nxt, &next->ndi) == 0) { (bpt)->unload((bpt), (&nxt));; return (0); } current.node = nxt.addr; (bpt)->unload((bpt), (&nxt));; } while (1); return (0); } return (-1); } int bpt_last_entry_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_ndi_tree *last) { if ((*last = bpt_node_size_tree(bpt, node) - 1) < 0) return (-1); return (0); } void bpt_reinit_entries_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node) { t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_ndi_tree i; for (i = 0; i < nkeys; i++) { memset(((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), 0x0, ((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); { if (((t_bpt_head_tree *)(((node))->buf))->type == 0x01) { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)); _entry_->key = (bpt->ukey); } else { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)); _entry_->key = (bpt->ukey); } }; if (((t_bpt_head_tree *)((node)->buf))->type == 0x01) { { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)); _entry_->value = (bpt->uaddr); }; } else { { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)); _entry_->value = (bpt->uval); }; } } } void bpt_make_node_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_type type) { t_bpt_ndi_tree nkeys; t_bpt_ndi_tree i; nkeys = type == 0x01 ? bpt->nikeys : bpt->nlkeys; ((t_bpt_head_tree *)((node)->buf))->type = (type); ((t_bpt_head_tree *)((node)->buf))->parent = (bpt->uaddr); ((t_bpt_head_tree *)((node)->buf))->prv = (bpt->uaddr); ((t_bpt_head_tree *)((node)->buf))->nxt = (bpt->uaddr); for (i = 0; i < nkeys; i++) { memset(((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), 0x0, ((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); { if (((t_bpt_head_tree *)(((node))->buf))->type == 0x01) { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)); _entry_->key = (bpt->ukey); } else { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)); _entry_->key = (bpt->ukey); } }; if (((t_bpt_head_tree *)((node)->buf))->type == 0x01) { { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)); _entry_->value = (bpt->uaddr); }; } else { { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)); _entry_->value = (bpt->uval); }; } } } void bpt_key_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree *key) { t_bpt_ndi_tree ndi; bpt_last_entry_tree(bpt, node, &ndi); *key = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (ndi) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (ndi) * sizeof(t_bpt_lfentry_tree)))->key); } int bpt_ndi_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_addr_tree value, t_bpt_ndi_tree *ndi) { t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_ndi_tree i; for (i = 0; (i < nkeys) && ((bpt)->keycmp((bpt), (((t_bpt_inentry_tree *)(((node))->buf + sizeof(t_bpt_head_tree) + ((i)) * sizeof(t_bpt_inentry_tree)))->key), (bpt->ukey)) != 0); i++) if ((bpt)->addrcmp((bpt), (((t_bpt_inentry_tree *)(((node))->buf + sizeof(t_bpt_head_tree) + ((i)) * sizeof(t_bpt_inentry_tree)))->value), (value)) == 0) { *ndi = i; return (0); } return (-1); } int bpt_update_node_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_node_tree addr, t_bpt_key_tree key, t_bpt_opts opts) { t_bpt_key_tree old = bpt->ukey; t_bpt_key_tree new = bpt->ukey; t_bpt_imm_tree parent; t_bpt_ndi_tree ndi; if (bpt_ndi_tree(bpt, node, addr, &ndi) != 0) { ; return (-1); } if (opts & 0x1) { bpt_key_tree(bpt, node, &old); { if (((t_bpt_head_tree *)(((node))->buf))->type == 0x01) { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (ndi) * sizeof(t_bpt_inentry_tree)); _entry_->key = (key); } else { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (ndi) * sizeof(t_bpt_lfentry_tree)); _entry_->key = (key); } }; } if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((node)->buf))->parent), (bpt->uaddr)) == 0) return (0); bpt_key_tree(bpt, node, &new); if (!(opts & 0x1)) old = new; if ((bpt)->keycmp((bpt), (new), (old)) == 0) return (0); (bpt)->load((bpt), (&parent), (((t_bpt_head_tree *)((node)->buf))->parent)); if (bpt_update_node_tree(bpt, &parent, node->addr, new, opts) != 0) { (bpt)->unload((bpt), (&parent));; return (-1); } (bpt)->unload((bpt), (&parent));; return (0); } void bpt_update_parent_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node) { t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_ndi_tree i; for (i = 0; (i < nkeys) && ((bpt)->keycmp((bpt), (((t_bpt_inentry_tree *)(((node))->buf + sizeof(t_bpt_head_tree) + ((i)) * sizeof(t_bpt_inentry_tree)))->key), (bpt->ukey)) != 0); i++) { t_bpt_imm_tree child; (bpt)->load((bpt), (&child), (((t_bpt_inentry_tree *)(((node))->buf + sizeof(t_bpt_head_tree) + ((i)) * sizeof(t_bpt_inentry_tree)))->value)); ((t_bpt_head_tree *)((&child)->buf))->parent = (node->addr); (bpt)->unload((bpt), (&child));; } } int bpt_update_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_opts opts) { t_bpt_imm_tree parent; t_bpt_key_tree key; if (opts & 0x2) { bpt_update_parent_tree(bpt, node); opts &= ~0x2; } if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((node)->buf))->parent), (bpt->uaddr)) == 0) return (0); if (opts == 0x0) return (0); bpt_key_tree(bpt, node, &key); (bpt)->load((bpt), (&parent), (((t_bpt_head_tree *)((node)->buf))->parent)); if (bpt_update_node_tree(bpt, &parent, node->addr, key, opts) != 0) { (bpt)->unload((bpt), (&parent));; return (-1); } (bpt)->unload((bpt), (&parent));; return (0); } int bpt_linear_search_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts) { t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_ndi_tree i; for (i = 0; (i < nkeys) && ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) != 0); i++) { if (opts & 0x2) if (((bpt)->keycmp((bpt), (key), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key))) <= 0) || ((i + 1) >= nkeys) || ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i + 1) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i + 1) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) == 0)) { *ndi = i; return (0); } if (opts & 0x1) if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key)), (key)) == 0) { *ndi = i; return (0); } } return (-1); } int bpt_dichotomic2_search_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts) { t_bpt_ndi_tree j = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys) - 1; t_bpt_ndi_tree i = 0; if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (0) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (0) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) == 0) { *ndi = 0; return (opts & 0x2 ? 0 : -1); } while (i <= j) { t_bpt_ndi_tree k = (i + j) / 2; if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) == 0) { j = k - 1; continue; } if (opts & 0x1) if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key)), (key)) == 0) { while (1) { if (k == 0) { *ndi = 0; return (0); } if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 1) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 1) * sizeof(t_bpt_lfentry_tree)))->key)), (key)) == 0) { k = k - 1; } else { *ndi = k; return (0); } } } if (opts & 0x2) if (((bpt)->keycmp((bpt), (key), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key))) <= 0) && ((k == 0) || ((bpt)->keycmp((bpt), (key), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 1) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 1) * sizeof(t_bpt_lfentry_tree)))->key))) > 0))) { if (k == 0) { *ndi = 0; return (0); } while (1) { if (k == 1) { *ndi = 1; return (0); } if (((bpt)->keycmp((bpt), (key), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 1) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 1) * sizeof(t_bpt_lfentry_tree)))->key))) <= 0) && ((bpt)->keycmp((bpt), (key), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 2) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 2) * sizeof(t_bpt_lfentry_tree)))->key))) > 0)) { k = k - 1; } else { *ndi = k; return (0); } } } if ((bpt)->keycmp((bpt), (key), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key))) < 0) j = k - 1; else i = k + 1; } if (opts & 0x2) { if (bpt_last_entry_tree(bpt, node, ndi) != 0) return (-1); return (0); } return (-1); } int bpt_dichotomic_search_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts) { t_bpt_ndi_tree j = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys) - 1; t_bpt_ndi_tree i = 0; if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (0) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (0) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) == 0) { *ndi = 0; return (opts & 0x2 ? 0 : -1); } while (i <= j) { t_bpt_ndi_tree k = (i + j) / 2; if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) == 0) { j = k - 1; continue; } if (opts & 0x1) if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key)), (key)) == 0) { *ndi = k; return (0); } if (opts & 0x2) if (((bpt)->keycmp((bpt), (key), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key))) <= 0) && ((k == 0) || ((bpt)->keycmp((bpt), (key), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 1) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k - 1) * sizeof(t_bpt_lfentry_tree)))->key))) > 0))) { *ndi = k; return (0); } if ((bpt)->keycmp((bpt), (key), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key))) < 0) j = k - 1; else i = k + 1; } if (opts & 0x2) { if (bpt_last_entry_tree(bpt, node, ndi) != 0) return (-1); return (0); } return (-1); } int bpt_search_entry_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts) { if (bpt->flags & 0x2) return (bpt_dichotomic2_search_tree(bpt, node, key, ndi, opts)); else return (bpt_dichotomic_search_tree(bpt, node, key, ndi, opts)); } int bpt_search_leaf_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_node_tree *leaf, t_bpt_key_tree key) { t_bpt_imm_tree child; t_bpt_ndi_tree ndi; if (((t_bpt_head_tree *)((node)->buf))->type == 0x02) { *leaf = node->addr; return (0); } if (bpt_search_entry_tree(bpt, node, key, &ndi, 0x2) != 0) return (-1); (bpt)->load((bpt), (&child), (((t_bpt_inentry_tree *)(((node))->buf + sizeof(t_bpt_head_tree) + ((ndi)) * sizeof(t_bpt_inentry_tree)))->value)); if (bpt_search_leaf_tree(bpt, &child, leaf, key) != 0) { (bpt)->unload((bpt), (&child));; return (-1); } (bpt)->unload((bpt), (&child));; return (0); } int bpt_search_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_entry_tree *entry) { t_bpt_imm_tree leaf; t_bpt_imm_tree root; (bpt)->load((bpt), (&root), ((bpt)->root)); if (bpt_search_leaf_tree(bpt, &root, &entry->node, key) != 0) { ; (bpt)->unload((bpt), (&root));; return (-1); } (bpt)->unload((bpt), (&root));; (bpt)->load((bpt), (&leaf), (entry->node)); if (bpt_search_entry_tree(bpt, &leaf, key, &entry->ndi, 0x1) != 0) { ; (bpt)->unload((bpt), (&leaf));; return (-1); } (bpt)->unload((bpt), (&leaf));; return (0); } int bpt_collide_next_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_entry_tree *entry) { t_bpt_imm_tree node; if (bpt_next_entry_tree(bpt, *entry, entry, 0x1) != 0) return (-1); (bpt)->load((bpt), (&node), (entry->node)); if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((&node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((&node)->buf + sizeof(t_bpt_head_tree) + (entry->ndi) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((&node)->buf + sizeof(t_bpt_head_tree) + (entry->ndi) * sizeof(t_bpt_lfentry_tree)))->key)), (key)) != 0) { (bpt)->unload((bpt), (&node));; return (-1); } (bpt)->unload((bpt), (&node));; return (0); } int bpt_collide_search_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_value_tree value, t_bpt_entry_tree *entry) { t_bpt_imm_tree node; if (bpt_search_tree(bpt, key, entry) != 0) { ; return (-1); } do { (bpt)->load((bpt), (&node), (entry->node)); if (((bpt)->keycmp((bpt), (((t_bpt_lfentry_tree *)(((&node))->buf + sizeof(t_bpt_head_tree) + ((entry->ndi)) * sizeof(t_bpt_lfentry_tree)))->key), (key)) == 0) && ((bpt)->valcmp((bpt), (((t_bpt_lfentry_tree *)(((&node))->buf + sizeof(t_bpt_head_tree) + ((entry->ndi)) * sizeof(t_bpt_lfentry_tree)))->value), (value)) == 0)) { (bpt)->unload((bpt), (&node));; return (0); } (bpt)->unload((bpt), (&node));; } while (bpt_collide_next_tree(bpt, key, entry) == 0); return (-1); } int bpt_check_collide_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_key_tree key, t_bpt_value_tree value) { t_bpt_imm_tree node2; t_bpt_entry_tree entry; entry.node = node1->addr; if (bpt_search_entry_tree(bpt, node1, key, &entry.ndi, 0x1) != 0) return (0); do { (bpt)->load((bpt), (&node2), (entry.node)); if (bpt->flags & 0x2) { if (((bpt)->keycmp((bpt), (((t_bpt_lfentry_tree *)(((&node2))->buf + sizeof(t_bpt_head_tree) + ((entry.ndi)) * sizeof(t_bpt_lfentry_tree)))->key), (key)) == 0) && ((bpt)->valcmp((bpt), (((t_bpt_lfentry_tree *)(((&node2))->buf + sizeof(t_bpt_head_tree) + ((entry.ndi)) * sizeof(t_bpt_lfentry_tree)))->value), (value)) == 0)) { (bpt)->unload((bpt), (&node2));; return (-1); } } else { if ((bpt)->keycmp((bpt), (((t_bpt_lfentry_tree *)(((&node2))->buf + sizeof(t_bpt_head_tree) + ((entry.ndi)) * sizeof(t_bpt_lfentry_tree)))->key), (key)) == 0) { (bpt)->unload((bpt), (&node2));; return (-1); } } (bpt)->unload((bpt), (&node2));; } while (bpt_collide_next_tree(bpt, key, &entry) == 0); return (0); } t_bpt_ndi_tree bpt_node_size_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node) { t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_ndi_tree j = nkeys - 1; t_bpt_ndi_tree i = 0; if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (0) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (0) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) == 0) return (0); while (i <= j) { t_bpt_ndi_tree k = (i + j) / 2; if (((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) != 0) && (((k + 1) > j) || ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k + 1) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k + 1) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) == 0))) return (k + 1); if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (k) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) == 0) j = k - 1; else i = k + 1; } return (0); } void bpt_simplify_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_unused_tree *unused) { t_bpt_node_tree parent; t_bpt_imm_tree node2; if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((node1)->buf))->parent), (bpt->uaddr)) == 0) return ; if (((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((node1)->buf))->prv), (bpt->uaddr)) != 0) || ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((node1)->buf))->nxt), (bpt->uaddr)) != 0)) return ; (bpt)->load((bpt), (&node2), (node1->addr)); while ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((&node2)->buf))->parent), (bpt->uaddr)) != 0) { parent = ((t_bpt_head_tree *)((&node2)->buf))->parent; (bpt)->unload((bpt), (&node2));; (bpt)->load((bpt), (&node2), (parent)); { (bpt)->nodes--; (unused)->index++; (unused)->array[(unused)->index] = (node2.addr); }; } (bpt)->unload((bpt), (&node2));; ((t_bpt_head_tree *)((node1)->buf))->parent = (bpt->uaddr); (bpt)->root = (node1->addr); } int bpt_balancein_1_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2, t_bpt_cbctx_tree *cbctx, t_bpt_entry_tree prev, t_bpt_unused_tree *unused) { t_bpt_imm_tree parent; t_bpt_entry_tree entry; bpt_insert_head_tree(bpt, node1, node2); ((t_bpt_head_tree *)((node2)->buf))->prv = (((t_bpt_head_tree *)((node1)->buf))->prv); if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((node2)->buf))->prv), (bpt->uaddr)) != 0) { t_bpt_imm_tree node3; (bpt)->load((bpt), (&node3), (((t_bpt_head_tree *)((node2)->buf))->prv)); ((t_bpt_head_tree *)((&node3)->buf))->nxt = (node2->addr); (bpt)->unload((bpt), (&node3));; } if (((t_bpt_head_tree *)((node2)->buf))->type == 0x01) if (bpt_update_tree(bpt, node2, 0x2) != 0) return (-1); (bpt)->load((bpt), (&parent), (((t_bpt_head_tree *)((node1)->buf))->parent)); entry.node = parent.addr; if (bpt_ndi_tree(bpt, &parent, node1->addr, &entry.ndi) != 0) { (bpt)->unload((bpt), (&parent));; return (-1); } (bpt)->unload((bpt), (&parent));; if (bpt_delete_tree(bpt, entry, cbctx, unused) != 0) return (-1); { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->cb = (0x5); }; if ((bpt)->addrcmp((bpt), (prev.node), (node1->addr)) == 0) { { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->previous.node = (node2->addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->previous.ndi = (prev.ndi); }; } else { { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->previous.node = (prev.node); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->previous.ndi = (prev.ndi); }; } { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->node = (node2->addr); }; { (bpt)->nodes--; (unused)->index++; (unused)->array[(unused)->index] = (node1->addr); }; return (0); } int bpt_balancein_2_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2, t_bpt_cbctx_tree *cbctx, t_bpt_entry_tree prev, t_bpt_unused_tree *unused) { t_bpt_ndi_tree ndi1; t_bpt_ndi_tree ndi2; bpt_insert_sort_tree(bpt, node1, bpt->ukey, &ndi1, 0x2); if (bpt_first_entry_tree(bpt, node2, &ndi2) != 0) return (-1); memcpy(((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? (node1)->buf + sizeof(t_bpt_head_tree) + (ndi1) * sizeof(t_bpt_inentry_tree) : (node1)->buf + sizeof(t_bpt_head_tree) + (ndi1) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (ndi2) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (ndi2) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); memset(((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (ndi2) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (ndi2) * sizeof(t_bpt_lfentry_tree), 0x0, ((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); { if (((t_bpt_head_tree *)(((node2))->buf))->type == 0x01) { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((node2)->buf + sizeof(t_bpt_head_tree) + (ndi2) * sizeof(t_bpt_inentry_tree)); _entry_->key = (bpt->ukey); } else { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((node2)->buf + sizeof(t_bpt_head_tree) + (ndi2) * sizeof(t_bpt_lfentry_tree)); _entry_->key = (bpt->ukey); } }; bpt_shift_sort_tree(bpt, node2); if (((t_bpt_head_tree *)((node1)->buf))->type == 0x01) if (bpt_update_tree(bpt, node1, 0x2) != 0) return (-1); if (bpt_update_tree(bpt, node1, 0x1) != 0) return (-1); { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->cb = (0x6); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->previous.node = (prev.node); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->previous.ndi = (prev.ndi); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->node1 = (node1->addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->node2 = (node2->addr); }; return (0); } int bpt_balancein_3_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node2, t_bpt_imm_tree *node1, t_bpt_cbctx_tree *cbctx, t_bpt_entry_tree prev, t_bpt_unused_tree *unused) { t_bpt_ndi_tree node1sz = bpt_node_size_tree(bpt, node1); t_bpt_imm_tree parent; t_bpt_entry_tree entry; bpt_insert_tail_tree(bpt, node2, node1); ((t_bpt_head_tree *)((node1)->buf))->nxt = (((t_bpt_head_tree *)((node2)->buf))->nxt); if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((node1)->buf))->nxt), (bpt->uaddr)) != 0) { t_bpt_imm_tree node3; (bpt)->load((bpt), (&node3), (((t_bpt_head_tree *)((node2)->buf))->nxt)); ((t_bpt_head_tree *)((&node3)->buf))->prv = (node1->addr); (bpt)->unload((bpt), (&node3));; } if (((t_bpt_head_tree *)((node2)->buf))->type == 0x01) if (bpt_update_tree(bpt, node1, 0x2) != 0) return (-1); if (bpt_update_tree(bpt, node1, 0x1) != 0) return (-1); (bpt)->load((bpt), (&parent), (((t_bpt_head_tree *)((node2)->buf))->parent)); entry.node = ((t_bpt_head_tree *)((node2)->buf))->parent; if (bpt_ndi_tree(bpt, &parent, node2->addr, &entry.ndi) != 0) { (bpt)->unload((bpt), (&parent));; return (-1); } (bpt)->unload((bpt), (&parent));; if (bpt_delete_tree(bpt, entry, cbctx, unused) != 0) return (-1); { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->cb = (0x5); }; if ((bpt)->addrcmp((bpt), (prev.node), (node2->addr)) == 0) { { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->previous.node = (node1->addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->previous.ndi = (node1sz + prev.ndi); }; } else { { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->previous.node = (prev.node); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->previous.ndi = (prev.ndi); }; } { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->node = (node1->addr); }; { (bpt)->nodes--; (unused)->index++; (unused)->array[(unused)->index] = (node2->addr); }; return (0); } int bpt_balancein_4_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node2, t_bpt_imm_tree *node1, t_bpt_cbctx_tree *cbctx, t_bpt_entry_tree prev, t_bpt_unused_tree *unused) { t_bpt_ndi_tree ndi1; t_bpt_ndi_tree ndi2; bpt_insert_sort_tree(bpt, node2, bpt->ukey, &ndi2, 0x1); if (bpt_last_entry_tree(bpt, node1, &ndi1) != 0) return (-1); memcpy(((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (ndi2) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (ndi2) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (node1)->buf + sizeof(t_bpt_head_tree) + (ndi1) * sizeof(t_bpt_inentry_tree) : (node1)->buf + sizeof(t_bpt_head_tree) + (ndi1) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); memset(((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (node1)->buf + sizeof(t_bpt_head_tree) + (ndi1) * sizeof(t_bpt_inentry_tree) : (node1)->buf + sizeof(t_bpt_head_tree) + (ndi1) * sizeof(t_bpt_lfentry_tree), 0x0, ((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); { if (((t_bpt_head_tree *)(((node1))->buf))->type == 0x01) { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((node1)->buf + sizeof(t_bpt_head_tree) + (ndi1) * sizeof(t_bpt_inentry_tree)); _entry_->key = (bpt->ukey); } else { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((node1)->buf + sizeof(t_bpt_head_tree) + (ndi1) * sizeof(t_bpt_lfentry_tree)); _entry_->key = (bpt->ukey); } }; if (((t_bpt_head_tree *)((node2)->buf))->type == 0x01) if (bpt_update_tree(bpt, node2, 0x2) != 0) return (-1); if (bpt_update_tree(bpt, node1, 0x1) != 0) return (-1); { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->cb = (0x6); }; if (((bpt)->addrcmp((bpt), (prev.node), (node1->addr)) == 0) && (prev.ndi == ndi1)) { { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->previous.node = (node2->addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->previous.ndi = (ndi2); }; } else { { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->previous.node = (prev.node); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->previous.ndi = (prev.ndi + 1); }; } { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->node1 = (node1->addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->node2 = (node2->addr); }; return (0); } int bpt_delete_tree(t_bpt_tree *bpt, t_bpt_entry_tree entry, t_bpt_cbctx_tree *cbctx, t_bpt_unused_tree *unused) { t_bpt_imm_tree node1; t_bpt_imm_tree node2; t_bpt_ndi_tree nkeys; t_bpt_entry_tree prev; if (bpt_prev_entry_tree(bpt, entry, &prev, 0x1) != 0) { prev.node = bpt->uaddr; prev.ndi = 0; } (bpt)->load((bpt), (&node1), (entry.node)); nkeys = (((t_bpt_head_tree *)(((&node1))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); memset(((t_bpt_head_tree *)(((&node1))->buf))->type == 0x01 ? (&node1)->buf + sizeof(t_bpt_head_tree) + (entry.ndi) * sizeof(t_bpt_inentry_tree) : (&node1)->buf + sizeof(t_bpt_head_tree) + (entry.ndi) * sizeof(t_bpt_lfentry_tree), 0x0, ((t_bpt_head_tree *)(((&node1))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); { if (((t_bpt_head_tree *)(((&node1))->buf))->type == 0x01) { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((&node1)->buf + sizeof(t_bpt_head_tree) + (entry.ndi) * sizeof(t_bpt_inentry_tree)); _entry_->key = (bpt->ukey); } else { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((&node1)->buf + sizeof(t_bpt_head_tree) + (entry.ndi) * sizeof(t_bpt_lfentry_tree)); _entry_->key = (bpt->ukey); } }; bpt_shift_sort_tree(bpt, &node1); if (((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((&node1)->buf))->parent), (bpt->uaddr)) == 0) || (bpt_node_size_tree(bpt, &node1) >= (t_bpt_ndi_tree) (((t_bpt_head_tree *)(((&node1))->buf))->type == 0x01 ? ((bpt)->ibalancing) : ((bpt)->lbalancing)))) { if (bpt_update_tree(bpt, &node1, 0x1) != 0) { ; (bpt)->unload((bpt), (&node1));; return (-1); } { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node1)->buf))->type) == 0x02)) (cbctx)->cb = (0x4); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node1)->buf))->type) == 0x02)) (cbctx)->previous.node = (prev.node); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node1)->buf))->type) == 0x02)) (cbctx)->previous.ndi = (prev.ndi); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node1)->buf))->type) == 0x02)) (cbctx)->node = (node1.addr); }; (bpt)->unload((bpt), (&node1));; return (0); } if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((&node1)->buf))->nxt), (bpt->uaddr)) != 0) { (bpt)->load((bpt), (&node2), (((t_bpt_head_tree *)((&node1)->buf))->nxt)); if ((bpt_node_size_tree(bpt, &node2) + bpt_node_size_tree(bpt, &node1)) <= nkeys) { if (bpt_balancein_1_tree(bpt, &node1, &node2, cbctx, prev, unused) != 0) { ; (bpt)->unload((bpt), (&node2));; (bpt)->unload((bpt), (&node1));; return (-1); } bpt_simplify_tree(bpt, &node2, unused); (bpt)->unload((bpt), (&node2));; (bpt)->unload((bpt), (&node1));; return (0); } else { if (bpt_balancein_2_tree(bpt, &node1, &node2, cbctx, prev, unused) != 0) { ; (bpt)->unload((bpt), (&node2));; (bpt)->unload((bpt), (&node1));; return (-1); } (bpt)->unload((bpt), (&node2));; (bpt)->unload((bpt), (&node1));; return (0); } (bpt)->unload((bpt), (&node2));; } if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((&node1)->buf))->prv), (bpt->uaddr)) != 0) { (bpt)->load((bpt), (&node2), (((t_bpt_head_tree *)((&node1)->buf))->prv)); if ((bpt_node_size_tree(bpt, &node2) + bpt_node_size_tree(bpt, &node1)) <= nkeys) { if (bpt_balancein_3_tree(bpt, &node1, &node2, cbctx, prev, unused) != 0) { ; (bpt)->unload((bpt), (&node2));; (bpt)->unload((bpt), (&node1));; return (-1); } bpt_simplify_tree(bpt, &node2, unused); (bpt)->unload((bpt), (&node2));; (bpt)->unload((bpt), (&node1));; return (0); } else { if (bpt_balancein_4_tree(bpt, &node1, &node2, cbctx, prev, unused) != 0) { ; (bpt)->unload((bpt), (&node2));; (bpt)->unload((bpt), (&node1));; return (-1); } (bpt)->unload((bpt), (&node2));; (bpt)->unload((bpt), (&node1));; return (0); } (bpt)->unload((bpt), (&node2));; } if (bpt_update_tree(bpt, &node1, 0x1) != 0) { ; (bpt)->unload((bpt), (&node1));; return (-1); } bpt_simplify_tree(bpt, &node1, unused); { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node1)->buf))->type) == 0x02)) (cbctx)->cb = (0x4); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node1)->buf))->type) == 0x02)) (cbctx)->previous.node = (prev.node); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node1)->buf))->type) == 0x02)) (cbctx)->previous.ndi = (prev.ndi); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node1)->buf))->type) == 0x02)) (cbctx)->node = (node1.addr); }; (bpt)->unload((bpt), (&node1));; return (0); } int bpt_remove_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_unused_tree *unused) { t_bpt_cbctx_tree cbctx; t_bpt_entry_tree entry; if (bpt_check_unused_tree(bpt, unused, 0x4) != 0) { ; return (-1); } if (bpt_search_tree(bpt, key, &entry) != 0) { ; return (-1); } { if ((bpt)->flags & 0x1) { (&cbctx)->cb = 0x0; (&cbctx)->previous.node = (bpt)->uaddr; (&cbctx)->previous.ndi = 0; (&cbctx)->current.node = (bpt)->uaddr; (&cbctx)->current.ndi = 0; (&cbctx)->node = bpt->uaddr; (&cbctx)->node1 = bpt->uaddr; (&cbctx)->node2 = bpt->uaddr; } }; if (bpt_delete_tree(bpt, entry, &cbctx, unused) != 0) { ; return (-1); } { if ((bpt)->flags & 0x1) (bpt)->callback((bpt), (&cbctx)); }; return (0); } int bpt_collide_remove_tree(t_bpt_tree *bpt, t_bpt_entry_tree entry, t_bpt_unused_tree *unused) { t_bpt_cbctx_tree cbctx; if (bpt_check_unused_tree(bpt, unused, 0x4) != 0) { ; return (-1); } { if ((bpt)->flags & 0x1) { (&cbctx)->cb = 0x0; (&cbctx)->previous.node = (bpt)->uaddr; (&cbctx)->previous.ndi = 0; (&cbctx)->current.node = (bpt)->uaddr; (&cbctx)->current.ndi = 0; (&cbctx)->node = bpt->uaddr; (&cbctx)->node1 = bpt->uaddr; (&cbctx)->node2 = bpt->uaddr; } }; if (bpt_delete_tree(bpt, entry, &cbctx, unused) != 0) { ; return (-1); } { if ((bpt)->flags & 0x1) (bpt)->callback((bpt), (&cbctx)); }; return (0); } int bpt_modify_tree(t_bpt_tree *bpt, t_bpt_key_tree key, t_bpt_lfentry_tree *lfentry, t_bpt_unused_tree *unused) { t_bpt_cbctx_tree cbctx; t_bpt_entry_tree entry; t_bpt_imm_tree node; if (bpt_check_unused_tree(bpt, unused, 0x3) != 0) { ; return (-1); } if ((bpt)->keycmp((bpt), (lfentry->key), (bpt->ukey)) == 0) { ; return (-1); } if (bpt_search_tree(bpt, key, &entry) != 0) { ; return (-1); } (bpt)->load((bpt), (&node), (entry.node)); { if ((bpt)->flags & 0x1) { (&cbctx)->cb = 0x0; (&cbctx)->previous.node = (bpt)->uaddr; (&cbctx)->previous.ndi = 0; (&cbctx)->current.node = (bpt)->uaddr; (&cbctx)->current.ndi = 0; (&cbctx)->node = bpt->uaddr; (&cbctx)->node1 = bpt->uaddr; (&cbctx)->node2 = bpt->uaddr; } }; if ((bpt)->keycmp((bpt), (lfentry->key), (((t_bpt_lfentry_tree *)(((&node))->buf + sizeof(t_bpt_head_tree) + ((entry.ndi)) * sizeof(t_bpt_lfentry_tree)))->key)) == 0) { memcpy((&node)->buf + sizeof(t_bpt_head_tree) + (entry.ndi) * sizeof(t_bpt_lfentry_tree), (lfentry), sizeof(t_bpt_lfentry_tree)); { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node)->buf))->type) == 0x02)) (&cbctx)->cb = (0x3); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node)->buf))->type) == 0x02)) (&cbctx)->current.node = (node.addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node)->buf))->type) == 0x02)) (&cbctx)->current.ndi = (entry.ndi); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node)->buf))->type) == 0x02)) (&cbctx)->node = (node.addr); }; { if ((bpt)->flags & 0x1) (bpt)->callback((bpt), (&cbctx)); }; (bpt)->unload((bpt), (&node));; return (0); } (bpt)->unload((bpt), (&node));; if (bpt_remove_tree(bpt, key, unused) != 0) { ; return (-1); } if (bpt_add_tree(bpt, lfentry, unused) != 0) { ; return (-1); } return (0); } int bpt_collide_modify_tree(t_bpt_tree *bpt, t_bpt_entry_tree entry, t_bpt_lfentry_tree *lfentry, t_bpt_unused_tree *unused) { t_bpt_cbctx_tree cbctx; t_bpt_imm_tree node; if (bpt_check_unused_tree(bpt, unused, 0x3) != 0) { ; return (-1); } if ((bpt)->keycmp((bpt), (lfentry->key), (bpt->ukey)) == 0) { ; return (-1); } (bpt)->load((bpt), (&node), (entry.node)); { if ((bpt)->flags & 0x1) { (&cbctx)->cb = 0x0; (&cbctx)->previous.node = (bpt)->uaddr; (&cbctx)->previous.ndi = 0; (&cbctx)->current.node = (bpt)->uaddr; (&cbctx)->current.ndi = 0; (&cbctx)->node = bpt->uaddr; (&cbctx)->node1 = bpt->uaddr; (&cbctx)->node2 = bpt->uaddr; } }; if ((bpt)->keycmp((bpt), (lfentry->key), (((t_bpt_lfentry_tree *)(((&node))->buf + sizeof(t_bpt_head_tree) + ((entry.ndi)) * sizeof(t_bpt_lfentry_tree)))->key)) == 0) { memcpy((&node)->buf + sizeof(t_bpt_head_tree) + (entry.ndi) * sizeof(t_bpt_lfentry_tree), (lfentry), sizeof(t_bpt_lfentry_tree)); { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node)->buf))->type) == 0x02)) (&cbctx)->cb = (0x3); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node)->buf))->type) == 0x02)) (&cbctx)->current.node = (node.addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node)->buf))->type) == 0x02)) (&cbctx)->current.ndi = (entry.ndi); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((&node)->buf))->type) == 0x02)) (&cbctx)->node = (node.addr); }; { if ((bpt)->flags & 0x1) (bpt)->callback((bpt), (&cbctx)); }; (bpt)->unload((bpt), (&node));; return (0); } (bpt)->unload((bpt), (&node));; if (bpt_collide_remove_tree(bpt, entry, unused) != 0) { ; return (-1); } if (bpt_add_tree(bpt, lfentry, unused) != 0) { ; return (-1); } return (0); } void bpt_insert_head_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2) { t_bpt_ndi_tree node1sz = bpt_node_size_tree(bpt, node1); t_bpt_ndi_tree node2sz = bpt_node_size_tree(bpt, node2); t_bpt_ndi_tree i; for (i = node2sz - 1; i >= 0; i--) memcpy(((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (node1sz + i) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (node1sz + i) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); for (i = 0; i < node1sz; i++) memcpy(((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); } void bpt_insert_tail_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2) { t_bpt_ndi_tree node2sz = bpt_node_size_tree(bpt, node2); t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_ndi_tree i; for (i = 0; (i < nkeys) && ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) != 0); i++) memcpy(((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (node2sz + i) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (node2sz + i) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); } void bpt_shift_sort_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node) { t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_entry_tree current; for (current.node = node->addr, current.ndi = 0; current.ndi < nkeys; current.ndi++) if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (current.ndi) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (current.ndi) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) == 0) { t_bpt_entry_tree next; if (bpt_next_entry_tree(bpt, current, &next, 0x2) != 0) break; { if (((t_bpt_head_tree *)(((node))->buf))->type == 0x01) { t_bpt_inentry_tree _swap_; memcpy(&_swap_, (node)->buf + sizeof(t_bpt_head_tree) + (current.ndi) * sizeof(t_bpt_inentry_tree), sizeof(t_bpt_inentry_tree)); memcpy((node)->buf + sizeof(t_bpt_head_tree) + (current.ndi) * sizeof(t_bpt_inentry_tree), (node)->buf + sizeof(t_bpt_head_tree) + (next.ndi) * sizeof(t_bpt_inentry_tree), sizeof(t_bpt_inentry_tree)); memcpy((node)->buf + sizeof(t_bpt_head_tree) + (next.ndi) * sizeof(t_bpt_inentry_tree), &_swap_, sizeof(t_bpt_inentry_tree)); } else { t_bpt_lfentry_tree _swap_; memcpy(&_swap_, (node)->buf + sizeof(t_bpt_head_tree) + (current.ndi) * sizeof(t_bpt_lfentry_tree), sizeof(t_bpt_lfentry_tree)); memcpy((node)->buf + sizeof(t_bpt_head_tree) + (current.ndi) * sizeof(t_bpt_lfentry_tree), (node)->buf + sizeof(t_bpt_head_tree) + (next.ndi) * sizeof(t_bpt_lfentry_tree), sizeof(t_bpt_lfentry_tree)); memcpy((node)->buf + sizeof(t_bpt_head_tree) + (next.ndi) * sizeof(t_bpt_lfentry_tree), &_swap_, sizeof(t_bpt_lfentry_tree)); } }; } } void bpt_insert_sort_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_key_tree key, t_bpt_ndi_tree *ndi, t_bpt_opts opts) { t_bpt_ndi_tree nodesz = bpt_node_size_tree(bpt, node); t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_ndi_tree i; if (opts & 0x1) { for (*ndi = 0, i = nodesz - 1; i >= 0; i--) memcpy(((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (node)->buf + sizeof(t_bpt_head_tree) + (i + 1) * sizeof(t_bpt_inentry_tree) : (node)->buf + sizeof(t_bpt_head_tree) + (i + 1) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); } else if (opts & 0x2) { *ndi = nodesz; } else { for (*ndi = 0; (*ndi < nkeys) && ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (*ndi) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (*ndi) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) != 0); (*ndi)++) if ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (*ndi) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (*ndi) * sizeof(t_bpt_lfentry_tree)))->key)), (key)) > 0) break; if (nodesz > *ndi) for (i = nodesz - 1; i >= *ndi; i--) memcpy(((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (node)->buf + sizeof(t_bpt_head_tree) + (i + 1) * sizeof(t_bpt_inentry_tree) : (node)->buf + sizeof(t_bpt_head_tree) + (i + 1) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); } memset(((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (node)->buf + sizeof(t_bpt_head_tree) + (*ndi) * sizeof(t_bpt_inentry_tree) : (node)->buf + sizeof(t_bpt_head_tree) + (*ndi) * sizeof(t_bpt_lfentry_tree), 0x0, ((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); { if (((t_bpt_head_tree *)(((node))->buf))->type == 0x01) { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (*ndi) * sizeof(t_bpt_inentry_tree)); _entry_->key = (bpt->ukey); } else { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (*ndi) * sizeof(t_bpt_lfentry_tree)); _entry_->key = (bpt->ukey); } }; } void bpt_new_root_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2, t_bpt_unused_tree *unused) { t_bpt_inentry_tree inentry; t_bpt_imm_tree root; t_bpt_addr_tree blk; t_bpt_ndi_tree ndi; { (blk) = (unused)->array[(unused)->index]; (unused)->array[(unused)->index] = bpt->uaddr; (unused)->index--; (bpt)->nodes++; }; (bpt)->load((bpt), (&root), (blk)); bpt_make_node_tree(bpt, &root, 0x01); memset(&inentry, 0x0, sizeof(t_bpt_inentry_tree)); bpt_key_tree(bpt, node1, &inentry.key); inentry.value = node1->addr; bpt_insert_sort_tree(bpt, &root, inentry.key, &ndi, 0x0); memcpy((&root)->buf + sizeof(t_bpt_head_tree) + (ndi) * sizeof(t_bpt_inentry_tree), (&inentry), sizeof(t_bpt_inentry_tree)); memset(&inentry, 0x0, sizeof(t_bpt_inentry_tree)); bpt_key_tree(bpt, node2, &inentry.key); inentry.value = node2->addr; bpt_insert_sort_tree(bpt, &root, inentry.key, &ndi, 0x0); memcpy((&root)->buf + sizeof(t_bpt_head_tree) + (ndi) * sizeof(t_bpt_inentry_tree), (&inentry), sizeof(t_bpt_inentry_tree)); (bpt)->root = (root.addr); ((t_bpt_head_tree *)((node1)->buf))->parent = (root.addr); ((t_bpt_head_tree *)((node2)->buf))->parent = (root.addr); bpt->height++; (bpt)->unload((bpt), (&root));; } int bpt_balanceout_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, t_bpt_imm_tree *node2, void *entry, t_bpt_cbctx_tree *cbctx) { t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_ndi_tree i; t_bpt_ndi_tree j; memcpy((node2->buf), (node1->buf), (bpt)->nodesz); bpt_reinit_entries_tree(bpt, node1); for (i = 0, j = 0; i < ((nkeys + 1) / 2); i++) { if ((entry != NULL) && ((bpt)->keycmp((bpt), (((((t_bpt_head_tree *)((node1)->buf))->type) == 0x01 ? ((t_bpt_inentry_tree *)(entry))->key : ((t_bpt_lfentry_tree *)(entry))->key)), ((((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node2)->buf + sizeof(t_bpt_head_tree) + (j) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node2)->buf + sizeof(t_bpt_head_tree) + (j) * sizeof(t_bpt_lfentry_tree)))->key))) < 0)) { memcpy(((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? (node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), (entry), ((t_bpt_head_tree *)(((node1))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->current.node = (node1->addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->current.ndi = (i); }; entry = NULL; continue; } memcpy(((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? (node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node1)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (j) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (j) * sizeof(t_bpt_lfentry_tree), ((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); memset(((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (j) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (j) * sizeof(t_bpt_lfentry_tree), 0x0, ((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); { if (((t_bpt_head_tree *)(((node2))->buf))->type == 0x01) { t_bpt_inentry_tree *_entry_ = (t_bpt_inentry_tree *)((node2)->buf + sizeof(t_bpt_head_tree) + (j) * sizeof(t_bpt_inentry_tree)); _entry_->key = (bpt->ukey); } else { t_bpt_lfentry_tree *_entry_ = (t_bpt_lfentry_tree *)((node2)->buf + sizeof(t_bpt_head_tree) + (j) * sizeof(t_bpt_lfentry_tree)); _entry_->key = (bpt->ukey); } }; j++; } bpt_shift_sort_tree(bpt, node2); if (entry != NULL) { bpt_insert_sort_tree(bpt, node2, ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x01 ? ((t_bpt_inentry_tree *)(entry))->key : ((t_bpt_lfentry_tree *)(entry))->key), &i, 0x0); memcpy(((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? (node2)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree) : (node2)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree), (entry), ((t_bpt_head_tree *)(((node2))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->current.node = (node2->addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node2)->buf))->type) == 0x02)) (cbctx)->current.ndi = (i); }; } ((t_bpt_head_tree *)((node2)->buf))->prv = (node1->addr); ((t_bpt_head_tree *)((node2)->buf))->nxt = (((t_bpt_head_tree *)((node1)->buf))->nxt); ((t_bpt_head_tree *)((node1)->buf))->nxt = (node2->addr); if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((node2)->buf))->nxt), (bpt->uaddr)) != 0) { t_bpt_imm_tree node3; (bpt)->load((bpt), (&node3), (((t_bpt_head_tree *)((node2)->buf))->nxt)); ((t_bpt_head_tree *)((&node3)->buf))->prv = (node2->addr); (bpt)->unload((bpt), (&node3));; } if (((t_bpt_head_tree *)((node1)->buf))->type == 0x01) { if (bpt_update_tree(bpt, node1, 0x2) != 0) return (-1); if (bpt_update_tree(bpt, node2, 0x2) != 0) return (-1); } return (0); } int bpt_split_node_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node1, void *entry, t_bpt_cbctx_tree *cbctx, t_bpt_unused_tree *unused) { t_bpt_imm_tree node2; t_bpt_addr_tree blk; { (blk) = (unused)->array[(unused)->index]; (unused)->array[(unused)->index] = bpt->uaddr; (unused)->index--; (bpt)->nodes++; }; (bpt)->load((bpt), (&node2), (blk)); bpt_make_node_tree(bpt, &node2, ((t_bpt_head_tree *)((node1)->buf))->type); ((t_bpt_head_tree *)((node1)->buf))->parent = (((t_bpt_head_tree *)((node1)->buf))->parent); if (bpt_balanceout_tree(bpt, node1, &node2, entry, cbctx) != 0) { ; (bpt)->unload((bpt), (&node2));; { (bpt)->nodes--; (unused)->index++; (unused)->array[(unused)->index] = (blk); }; return (-1); } if ((bpt)->addrcmp((bpt), (((t_bpt_head_tree *)((node1)->buf))->parent), (bpt->uaddr)) == 0) { bpt_new_root_tree(bpt, node1, &node2, unused); } else { t_bpt_inentry_tree inentry; t_bpt_imm_tree parent; if (bpt_update_tree(bpt, node1, 0x1) != 0) { (bpt)->unload((bpt), (&node2));; { (bpt)->nodes--; (unused)->index++; (unused)->array[(unused)->index] = (blk); }; return (-1); } memset(&inentry, 0x0, sizeof(t_bpt_inentry_tree)); bpt_key_tree(bpt, &node2, &inentry.key); inentry.value = node2.addr; (bpt)->load((bpt), (&parent), (((t_bpt_head_tree *)((&node2)->buf))->parent)); if (bpt_insert_tree(bpt, &parent, &inentry, cbctx, unused) != 0) { ; (bpt)->unload((bpt), (&parent));; (bpt)->unload((bpt), (&node2));; { (bpt)->nodes--; (unused)->index++; (unused)->array[(unused)->index] = (blk); }; return (-1); } (bpt)->unload((bpt), (&parent));; } { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->cb = (0x2); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->node1 = (node1->addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node1)->buf))->type) == 0x02)) (cbctx)->node2 = (node2.addr); }; (bpt)->unload((bpt), (&node2));; return (0); } int bpt_insert_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, void *entry, t_bpt_cbctx_tree *cbctx, t_bpt_unused_tree *unused) { if (bpt_node_size_tree(bpt, node) < (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys)) { t_bpt_ndi_tree ndi; bpt_insert_sort_tree(bpt, node, ((((t_bpt_head_tree *)((node)->buf))->type) == 0x01 ? ((t_bpt_inentry_tree *)(entry))->key : ((t_bpt_lfentry_tree *)(entry))->key), &ndi, 0x0); memcpy(((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (node)->buf + sizeof(t_bpt_head_tree) + (ndi) * sizeof(t_bpt_inentry_tree) : (node)->buf + sizeof(t_bpt_head_tree) + (ndi) * sizeof(t_bpt_lfentry_tree), (entry), ((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? sizeof(t_bpt_inentry_tree) : sizeof(t_bpt_lfentry_tree)); if (bpt_update_tree(bpt, node, 0x1) != 0) { ; return (-1); } { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node)->buf))->type) == 0x02)) (cbctx)->cb = (0x1); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node)->buf))->type) == 0x02)) (cbctx)->current.node = (node->addr); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node)->buf))->type) == 0x02)) (cbctx)->current.ndi = (ndi); }; { if (((bpt)->flags & 0x1) && ((((t_bpt_head_tree *)((node)->buf))->type) == 0x02)) (cbctx)->node = (node->addr); }; } else { if (bpt_split_node_tree(bpt, node, entry, cbctx, unused) != 0) { ; return (-1); } } return (0); } int bpt_add_tree(t_bpt_tree *bpt, t_bpt_lfentry_tree *lfentry, t_bpt_unused_tree *unused) { t_bpt_cbctx_tree cbctx; t_bpt_node_tree addr; t_bpt_imm_tree leaf; t_bpt_imm_tree root; if (bpt_check_unused_tree(bpt, unused, 0x2) != 0) { ; return (-1); } if ((bpt)->keycmp((bpt), (lfentry->key), (bpt->ukey)) == 0) { ; return (-1); } (bpt)->load((bpt), (&root), ((bpt)->root)); if (bpt_search_leaf_tree(bpt, &root, &addr, lfentry->key) != 0) { ; (bpt)->unload((bpt), (&root));; return (-1); } (bpt)->unload((bpt), (&root));; (bpt)->load((bpt), (&leaf), (addr)); if (bpt_check_collide_tree(bpt, &leaf, lfentry->key, lfentry->value) != 0) { ; (bpt)->unload((bpt), (&leaf));; return (-1); } { if ((bpt)->flags & 0x1) { (&cbctx)->cb = 0x0; (&cbctx)->previous.node = (bpt)->uaddr; (&cbctx)->previous.ndi = 0; (&cbctx)->current.node = (bpt)->uaddr; (&cbctx)->current.ndi = 0; (&cbctx)->node = bpt->uaddr; (&cbctx)->node1 = bpt->uaddr; (&cbctx)->node2 = bpt->uaddr; } }; if (bpt_insert_tree(bpt, &leaf, lfentry, &cbctx, unused) != 0) { ; (bpt)->unload((bpt), (&leaf));; return (-1); } { if ((bpt)->flags & 0x1) (bpt)->callback((bpt), (&cbctx)); }; (bpt)->unload((bpt), (&leaf));; return (0); } int bpt_init_tree(t_bpt_tree *bpt, t_bpt_ndi_tree nodesz, t_bpt_addr_tree uaddr, t_bpt_key_tree ukey, t_bpt_value_tree uval, t_bpt_flags flags, unsigned char balancing, t_bpt_load_fn_tree load, t_bpt_unload_fn_tree unload, t_bpt_addrcmp_fn_tree addrcmp, t_bpt_keycmp_fn_tree keycmp, t_bpt_valcmp_fn_tree valcmp, t_bpt_cb_fn_tree callback, void *data, t_bpt_unused_tree *unused) { t_bpt_imm_tree root; t_bpt_addr_tree addr; if (bpt_check_unused_tree(bpt, unused, 0x1) != 0) { ; return (-1); } bpt->nodesz = nodesz; bpt->ukey = ukey; bpt->uaddr = uaddr; bpt->uval = uval; bpt->nodes = 0; bpt->flags = flags; if (bpt->nodesz < sizeof(t_bpt_head_tree)) { ; return (-1); } bpt->nikeys = (bpt->nodesz - sizeof(t_bpt_head_tree)) / sizeof(t_bpt_inentry_tree); bpt->nlkeys = (bpt->nodesz - sizeof(t_bpt_head_tree)) / sizeof(t_bpt_lfentry_tree); bpt->height = 0x1; if ((balancing <= 0) || (balancing >= 100)) { ; return (-1); } bpt->ibalancing = (bpt->nikeys * balancing % 100) == 0 ? bpt->nikeys * balancing / 100 : bpt->nikeys * balancing / 100 + 1; bpt->lbalancing = (bpt->nlkeys * balancing % 100) == 0 ? bpt->nlkeys * balancing / 100 : bpt->nlkeys * balancing / 100 + 1; bpt->data = data; if (bpt->nikeys < 0x2) { ; return (-1); } if (bpt->nlkeys < 0x2) { ; return (-1); } { (addr) = (unused)->array[(unused)->index]; (unused)->array[(unused)->index] = bpt->uaddr; (unused)->index--; (bpt)->nodes++; }; (bpt)->root = (addr); bpt->load = load; bpt->unload = unload; bpt->addrcmp = addrcmp; bpt->keycmp = keycmp; bpt->valcmp = valcmp; bpt->callback = callback; (bpt)->load((bpt), (&root), ((bpt)->root)); bpt_make_node_tree(bpt, &root, 0x02); (bpt)->unload((bpt), (&root));; return (0); } int bpt_clean_node_tree(t_bpt_tree *bpt, t_bpt_imm_tree *node, t_bpt_unused_tree *unused) { t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys); t_bpt_imm_tree child; t_bpt_ndi_tree i; { (bpt)->nodes--; (unused)->index++; (unused)->array[(unused)->index] = (node->addr); }; if (((t_bpt_head_tree *)((node)->buf))->type == 0x02) return (0); for (i = 0; (i < nkeys) && ((bpt)->keycmp((bpt), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key)), (bpt->ukey)) != 0); i++) { (bpt)->load((bpt), (&child), (((t_bpt_inentry_tree *)(((node))->buf + sizeof(t_bpt_head_tree) + ((i)) * sizeof(t_bpt_inentry_tree)))->value)); if (bpt_clean_node_tree(bpt, &child, unused) != 0) { (bpt)->unload((bpt), (&child));; return (-1); } (bpt)->unload((bpt), (&child));; } return (0); } int bpt_clean_tree(t_bpt_tree *bpt, t_bpt_unused_tree *unused) { t_bpt_imm_tree root; if (bpt_check_unused_tree(bpt, unused, 0x5) != 0) { ; return (-1); } (bpt)->load((bpt), (&root), ((bpt)->root)); if (bpt_clean_node_tree(bpt, &root, unused) != 0) { ; (bpt)->unload((bpt), (&root));; return (-1); } (bpt)->unload((bpt), (&root));; return (0); };
unsigned int ___loaded = 0;
unsigned int ___allocated = 0;
void tree_dump_entry(t_bpt_tree *bpt,
     t_bpt_imm_tree *node,
     t_bpt_ndi_tree i);
void tree_dump_node(t_bpt_tree *bpt,
           t_bpt_imm_tree *node,
           t_bpt_height_tree level);
void tree_dump(t_bpt_tree *bpt);
void tree_load(t_bpt_tree *bpt,
      t_bpt_imm_tree *node,
      t_bpt_node_tree addr);
void tree_unload(t_bpt_tree *bpt,
        t_bpt_imm_tree *node);
int tree_addrcmp(t_bpt_tree *bpt,
         t_bpt_addr_tree addr2,
         t_bpt_addr_tree addr1);
int tree_keycmp(t_bpt_tree *bpt,
        t_bpt_key_tree key2,
        t_bpt_key_tree key1);
int tree_valcmp(t_bpt_tree *bpt,
        t_bpt_value_tree val2,
        t_bpt_value_tree val1);
void tree_callback(t_bpt_tree *bpt,
          t_bpt_cbctx_tree *cbctx);
void tree_make_unused(t_bpt_unused_tree *unused,
      t_bpt_addr_tree *array,
      t_bpt_uni_tree size,
      t_bpt_uni_tree alloc);
void tree_clean_unused(t_bpt_unused_tree *unused,
       t_bpt_uni_tree size);
int tree_init(t_bpt_tree *bpt);
int tree_add(t_bpt_tree *bpt,
     t_bpt_key_tree key,
     t_bpt_value_tree value);
int tree_mod(t_bpt_tree *bpt,
     t_bpt_key_tree idk,
     t_bpt_key_tree key,
     t_bpt_value_tree value);
int tree_rem(t_bpt_tree *bpt,
     t_bpt_key_tree idk);
int tree_clean(t_bpt_tree *bpt);
void tree_exit(int code,
      char *msg,
      int error);
int tree_op(t_bpt_tree *bpt,
    t_in_input input);
int tree_verify(t_bpt_tree *bpt,
        t_in_output *output,
        u_int64_t i);
void tree_main(void);
void tree_load(t_bpt_tree *bpt,
      t_bpt_imm_tree *node,
      t_bpt_node_tree addr)
{
  node->addr = addr;
  node->buf = (void *)((unsigned int)addr);
}
void tree_unload(t_bpt_tree *bpt,
        t_bpt_imm_tree *node)
{
}
int tree_addrcmp(t_bpt_tree *bpt,
         t_bpt_addr_tree addr1,
         t_bpt_addr_tree addr2)
{
  if (addr1 < addr2)
    return (-1);
  else
    return (addr1 > addr2);
}
int tree_keycmp(t_bpt_tree *bpt,
        t_bpt_key_tree key1,
        t_bpt_key_tree key2)
{
  if (key1 < key2)
    return (-1);
  else
    return (key1 > key2);
}
int tree_valcmp(t_bpt_tree *bpt,
        t_bpt_value_tree val1,
        t_bpt_value_tree val2)
{
  if (val1 < val2)
    return (-1);
  else
    return (val1 > val2);
}
void tree_callback(t_bpt_tree *bpt,
          t_bpt_cbctx_tree *cbctx)
{
}
void tree_make_unused(t_bpt_unused_tree *unused,
      t_bpt_addr_tree *array,
      t_bpt_uni_tree size,
      t_bpt_uni_tree alloc)
{
  t_bpt_uni_tree i;
  unused->array = array;
  unused->index = alloc - 1;
  for (i = 0; i < size; i++)
    unused->array[i] = (t_bpt_addr_tree)IN_UNUSED_ADDR;
  for (i = 0; i < alloc; i++)
    {
      unused->array[i] = (t_bpt_addr_tree)((unsigned int)malloc(IN_NODESZ));
      ___allocated++;
    }
}
void tree_clean_unused(t_bpt_unused_tree *unused,
       t_bpt_uni_tree size)
{
  t_bpt_uni_tree i;
  for (i = 0; i < size; i++)
    if (unused->array[i] != IN_UNUSED_ADDR)
      {
 free((void *)((unsigned int)unused->array[i]));
 ___allocated--;
      }
}
int tree_init(t_bpt_tree *bpt)
{
  t_bpt_uni_tree alloc = (1);
  t_bpt_uni_tree size = (1);
  t_bpt_addr_tree array[size];
  t_bpt_unused_tree unused;
  tree_make_unused(&unused, array, size, alloc);
  if (bpt_init_tree(bpt, IN_NODESZ, IN_UNUSED_ADDR, IN_UNUSED_KEY, IN_UNUSED_VALUE, IN_FLAGS, 50, tree_load, tree_unload, tree_addrcmp, tree_keycmp, tree_valcmp, tree_callback, NULL, &unused) != 0)
    {
      tree_clean_unused(&unused, size);
      return (-1);
    }
  tree_clean_unused(&unused, size);
  return (0);
}
int tree_add(t_bpt_tree *bpt,
     t_bpt_key_tree key,
     t_bpt_value_tree value)
{
  t_bpt_uni_tree alloc = ((bpt)->height + 1);
  t_bpt_uni_tree size = ((bpt)->height + 1);
  t_bpt_addr_tree array[size];
  t_bpt_lfentry_tree lfentry;
  t_bpt_unused_tree unused;
  memset(&lfentry, 0x0, sizeof(t_bpt_lfentry_tree));
  tree_make_unused(&unused, array, size, alloc);
  lfentry.key = key;
  lfentry.value = value;
  if (bpt_add_tree(bpt, &lfentry, &unused) != 0)
    {
      tree_clean_unused(&unused, size);
      return (-1);
    }
  tree_clean_unused(&unused, size);
  return (0);
}
int tree_mod(t_bpt_tree *bpt,
     t_bpt_key_tree idk,
     t_bpt_key_tree key,
     t_bpt_value_tree value)
{
  t_bpt_uni_tree alloc = (((bpt)->height + 1) + (0));
  t_bpt_uni_tree size = (((bpt)->height + 1) + (bpt)->height);
  t_bpt_addr_tree array[size];
  t_bpt_lfentry_tree lfentry;
  t_bpt_unused_tree unused;
  memset(&lfentry, 0x0, sizeof(t_bpt_lfentry_tree));
  tree_make_unused(&unused, array, size, alloc);
  lfentry.key = key;
  lfentry.value = value;
  if (bpt_modify_tree(bpt, idk, &lfentry, &unused) != 0)
    {
      tree_clean_unused(&unused, size);
      return (-1);
    }
  tree_clean_unused(&unused, size);
  return (0);
}
int tree_rem(t_bpt_tree *bpt,
     t_bpt_key_tree idk)
{
  t_bpt_uni_tree alloc = (0);
  t_bpt_uni_tree size = (bpt)->height;
  t_bpt_addr_tree array[size];
  t_bpt_unused_tree unused;
  tree_make_unused(&unused, array, size, alloc);
  if (bpt_remove_tree(bpt, idk, &unused) != 0)
    {
      tree_clean_unused(&unused, size);
      return (-1);
    }
  tree_clean_unused(&unused, size);
  return (0);
}
int tree_clean(t_bpt_tree *bpt)
{
  t_bpt_uni_tree alloc = (0);
  t_bpt_uni_tree size = ((bpt)->nodes);
  t_bpt_addr_tree array[size];
  t_bpt_unused_tree unused;
  tree_make_unused(&unused, array, size, alloc);
  if (bpt_clean_tree(bpt, &unused) != 0)
    {
      tree_clean_unused(&unused, size);
      return (-1);
    }
  tree_clean_unused(&unused, size);
  return (0);
}
void tree_exit(int code,
      char *msg,
      int error)
{
  printf("%s", msg);
  printf("\n");
  exit(code);
}
int tree_op(t_bpt_tree *bpt,
    t_in_input input)
{
  switch(input.op)
    {
      case IN_ADD:
 return (tree_add(bpt, input.key, input.value));
 break;
      case IN_MOD:
 return (tree_mod(bpt, input.id, input.key, input.value));
 break;
      case IN_REM:
 return (tree_rem(bpt, input.id));
 break;
    }
  return (-1);
}
int tree_verify(t_bpt_tree *bpt,
        t_in_output *output,
        u_int64_t i)
{
  int64_t nxt = (i + 1) >= IN_OUTPUT_NOPS ? -1 : i + 1;
  int64_t prv = i == 0 ? -1 : i - 1;
  t_bpt_entry_tree previous;
  t_bpt_entry_tree current;
  t_bpt_imm_tree node1;
  t_bpt_imm_tree node2;
  t_bpt_entry_tree next;
  if (bpt_search_tree(bpt, output[i].key, &current) != 0)
    return (-1);
  (bpt)->load((bpt), (&node1), (current.node));
  if (prv != -1)
    {
      if (bpt_prev_entry_tree(bpt, current, &previous, 0x1) != 0)
 {
   (bpt)->unload((bpt), (&node1));;
   return (-1);
 }
      (bpt)->load((bpt), (&node2), (previous.node));
      if (((((t_bpt_head_tree *)(((&node2))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((&node2)->buf + sizeof(t_bpt_head_tree) + (previous.ndi) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((&node2)->buf + sizeof(t_bpt_head_tree) + (previous.ndi) * sizeof(t_bpt_lfentry_tree)))->key) !=
    output[prv].key) ||
   ((((t_bpt_head_tree *)(((&node2))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((&node2)->buf + sizeof(t_bpt_head_tree) + (previous.ndi) * sizeof(t_bpt_inentry_tree)))->value : ((t_bpt_lfentry_tree *)((&node2)->buf + sizeof(t_bpt_head_tree) + (previous.ndi) * sizeof(t_bpt_lfentry_tree)))->value) !=
    output[prv].value))
 {
   (bpt)->unload((bpt), (&node2));;
   (bpt)->unload((bpt), (&node1));;
   return (-1);
 }
      (bpt)->unload((bpt), (&node2));;
    }
  if (nxt != -1)
    {
      if (bpt_next_entry_tree(bpt, current, &next, 0x1) != 0)
 {
   (bpt)->unload((bpt), (&node1));;
   return (-1);
 }
      (bpt)->load((bpt), (&node2), (next.node));
      if (((((t_bpt_head_tree *)(((&node2))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((&node2)->buf + sizeof(t_bpt_head_tree) + (next.ndi) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((&node2)->buf + sizeof(t_bpt_head_tree) + (next.ndi) * sizeof(t_bpt_lfentry_tree)))->key) !=
    output[nxt].key) ||
   ((((t_bpt_head_tree *)(((&node2))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((&node2)->buf + sizeof(t_bpt_head_tree) + (next.ndi) * sizeof(t_bpt_inentry_tree)))->value : ((t_bpt_lfentry_tree *)((&node2)->buf + sizeof(t_bpt_head_tree) + (next.ndi) * sizeof(t_bpt_lfentry_tree)))->value) !=
    output[nxt].value))
 {
   (bpt)->unload((bpt), (&node2));;
   (bpt)->unload((bpt), (&node1));;
   return (-1);
 }
      (bpt)->unload((bpt), (&node2));;
    }
  return (0);
}
void tree_dump_entry(t_bpt_tree *bpt,
     t_bpt_imm_tree *node,
     t_bpt_ndi_tree i)
{
  printf("[entry %3u] k: %10qd\t\tv: %10qd\n",
  i,
         (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key) == bpt->ukey ?
  -1 : (int64_t)(((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key),
         (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key) == bpt->ukey ?
         -1 : (int64_t)(((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->value : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->value));
}
void tree_dump_node(t_bpt_tree *bpt,
           t_bpt_imm_tree *node,
           t_bpt_height_tree level)
{
  t_bpt_ndi_tree nkeys = (((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? (bpt)->nikeys : (bpt)->nlkeys);
  t_bpt_imm_tree child;
  t_bpt_ndi_tree i;
  { int _i_; for (_i_ = 0; _i_ < (level * 3); _i_++) printf(" "); };
  printf("[head] t: ");
  if (((t_bpt_head_tree *)((node)->buf))->type == 0x01)
    printf("internal");
  else
    printf("leaf");
  printf(" (%qu)   parent: %qd   prv: %qd   nxt: %qd\n",
  (int64_t)node->addr,
         ((t_bpt_head_tree *)((node)->buf))->parent == bpt->uaddr ?
  -1 : (int64_t)((t_bpt_head_tree *)((node)->buf))->parent,
         ((t_bpt_head_tree *)((node)->buf))->prv == bpt->uaddr ?
  -1 : (int64_t)((t_bpt_head_tree *)((node)->buf))->prv,
         ((t_bpt_head_tree *)((node)->buf))->nxt == bpt->uaddr ?
  -1 : (int64_t)((t_bpt_head_tree *)((node)->buf))->nxt);
  for (i = 0; i < nkeys; i++)
    {
      { int _i_; for (_i_ = 0; _i_ < (level * 3); _i_++) printf(" "); };
      tree_dump_entry(bpt, node, i);
      if ((((t_bpt_head_tree *)((node)->buf))->type == 0x01) &&
   ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->key : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->key) != bpt->ukey))
 {
   (bpt)->load((bpt), (&child), ((((t_bpt_head_tree *)(((node))->buf))->type == 0x01 ? ((t_bpt_inentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_inentry_tree)))->value : ((t_bpt_lfentry_tree *)((node)->buf + sizeof(t_bpt_head_tree) + (i) * sizeof(t_bpt_lfentry_tree)))->value)));
   tree_dump_node(bpt, &child, level + 1);
   (bpt)->unload((bpt), (&child));;
 }
    }
}
void tree_dump(t_bpt_tree *bpt)
{
  t_bpt_imm_tree root;
  (bpt)->load((bpt), (&root), (bpt->root));
  tree_dump_node(bpt, &root, 0);
  (bpt)->unload((bpt), (&root));;
}
void tree_main(void)
{
  t_bpt_tree bpt;
  u_int64_t i;
  if (tree_init(&bpt) != 0)
    tree_exit(EXIT_FAILURE, "[KO]", 0x1);
  for (i = 0; i < IN_INPUT_NOPS; i++)
    {
      if (tree_op(&bpt, input[i]) != 0)
 tree_exit(EXIT_FAILURE, "[KO]", 0x2);
    }
  for (i = 0; i < IN_OUTPUT_NOPS; i++)
    if (tree_verify(&bpt, output, i) != 0)
      tree_exit(EXIT_FAILURE, "[KO]", 0x3);
  if (tree_clean(&bpt) != 0)
    tree_exit(EXIT_FAILURE, "[KO]", 0x4);
  if (___loaded != 0)
    tree_exit(EXIT_FAILURE, "[KO]", 0x5);
  if (___allocated != 0)
    tree_exit(EXIT_FAILURE, "[KO]", 0x6);
}
int main(void)
{
  struct timeval reftime;
  struct timeval curtime;
  struct timeval diff;
  struct timezone tzp;
  printf("[%-5s] running %-15s		", "bpt", IN_NAME);
  fflush(stdout);
  gettimeofday(&reftime, &tzp);
  tree_main();
  gettimeofday(&curtime, &tzp);
  timersub(&curtime, &reftime, &diff);
  printf("%u.%u ", (unsigned int)diff.tv_sec,
  (unsigned int)diff.tv_usec);
  tree_exit(EXIT_SUCCESS, "[OK]", 0x0);
  return (0);
}
