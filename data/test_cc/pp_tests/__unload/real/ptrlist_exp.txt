struct ptr_list {
 int nr;
 struct ptr_list *prev;
 struct ptr_list *next;
 void *list[(29)];
};
void * undo_ptr_list_last(struct ptr_list **head);
void * delete_ptr_list_last(struct ptr_list **head);
int delete_ptr_list_entry(struct ptr_list **, void *, int);
int replace_ptr_list_entry(struct ptr_list **, void *old, void *new, int);
extern void sort_list(struct ptr_list **, int (*)(const void *, const void *));
extern void **__add_ptr_list(struct ptr_list **, void *, unsigned long);
extern void concat_ptr_list(struct ptr_list *a, struct ptr_list **b);
extern void __free_ptr_list(struct ptr_list **);
extern int ptr_list_size(struct ptr_list *);
extern int linearize_ptr_list(struct ptr_list *, void **, int);
static inline void *first_ptr_list(struct ptr_list *list)
{
 if (!list)
  return NULL;
 return (void *)(~3UL & (unsigned long)((list)->list[0]));
}
static inline void *last_ptr_list(struct ptr_list *list)
{
 if (!list)
  return NULL;
 list = list->prev;
 return (void *)(~3UL & (unsigned long)((list)->list[list->nr-1]));
}
extern void split_ptr_list_head(struct ptr_list *);
extern void pack_ptr_list(struct ptr_list **);
static inline void update_tag(void *p, unsigned long tag)
{
 unsigned long *ptr = p;
 *ptr = tag | (~3UL & *ptr);
}
static inline void *tag_ptr(void *ptr, unsigned long tag)
{
 return (void *)(tag | (unsigned long)ptr);
}
int main(int argc, char **argv)
{
 struct string_list *filelist = NULL;
 char *file;
 preprocess_only = 1;
 sparse_initialize(argc, argv, &filelist);
 do { struct ptr_list *__headfile = (struct ptr_list *) (filelist); struct ptr_list *__listfile = __headfile; (void)(&(file) == &(filelist)->list[0]); if (__headfile) { do { int __nrfile; for (__nrfile = 0; __nrfile < __listfile->nr; __nrfile++) { do { file = ((__listfile)->list[__nrfile]); do { {
  sparse(file);
 } } while (0); } while (0); } } while ((__listfile = __listfile->next) != __headfile); } } while (0);
 show_identifier_stats();
 return 0;
}
